<?xml version="1.0" encoding="utf-8"?>
<posts>
  <post id="ac8aebd0-9a16-41a9-98d5-fa51e1948191" author="rivaa" lastModificationTime="2018-10-26T13:02:55.7908207Z">
    <title><![CDATA[What is a NullReferenceException, and how do I fix it?]]></title>
    <description><![CDATA[You are trying to use something that is null (or Nothing in VB.NET). This means you either set it to null, or you never set it to anything at all.

Like anything else, null gets passed around. If it is null in method "A", it could be that method "B" passed a null to method "A".

null can have different meanings:

Object variables which are uninitialized and hence point to nothing. In this case, if you access properties or methods of such objects, it causes a NullReferenceException.
The developer is using null intentionally to indicate there is no meaningful value available. Note that C# has the concept of nullable datatypes for variables (like database tables can have nullable fields) - you can assign null to them to indicate there is no value stored in it, for example int? a = null; where the question mark indicates it is allowed to store null in variable a. You can check that either with if (a.HasValue) {...} or with if (a==null) {...}. Nullable variables, like a this example, allow to access the value via a.Value explicitly, or just as normal via a. 
Note that accessing it via a.Value throws an InvalidOperationException instead of a NullReferenceException if a is null - you should do the check beforehand, i.e. if you have another on-nullable variable int b; then you should do assignments like if (a.HasValue) { b = a.Value; } or shorter if (a != null) { b = a; }.
The rest of this article goes into more detail and shows mistakes that many programmers often make which can lead to a NullReferenceException.

More Specifically
The runtime throwing a NullReferenceException always means the same thing: you are trying to use a reference, and the reference is not initialized (or it was once initialized, but is no longer initialized).

This means the reference is null, and you cannot access members (such as methods) through a null reference. The simplest case:

string foo = null;
foo.ToUpper();
This will throw a NullReferenceException at the second line because you can't call the instance method ToUpper() on a string reference pointing to null.

Debugging
How do you find the source of a NullReferenceException? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos.

If you want to find out where the reference is or isn't set, right-click its name and select "Find All References". You can then place a breakpoint at every found location and run your program with the debugger attached. Every time the debugger breaks on such a breakpoint, you need to determine whether you expect the reference to be non-null, inspect the variable and and verify that it points to an instance when you expect it to.

By following the program flow this way, you can find the location where the instance should not be null, and why it isn't properly set.

Examples
Some common scenarios where the exception can be thrown:

Generic
ref1.ref2.ref3.member
If ref1 or ref2 or ref3 is null, then you'll get a NullReferenceException. If you want to solve the problem, then find out which one is null by rewriting the expression to its simpler equivalent:

var r1 = ref1;
var r2 = r1.ref2;
var r3 = r2.ref3;
r3.member
Specifically, in HttpContext.Current.User.Identity.Name, the HttpContext.Current could be null, or the User property could be null, or the Identity property could be null.

Indirect
public class Person {
    public int Age { get; set; }
}
public class Book {
    public Person Author { get; set; }
}
public class Example {
    public void Foo() {
        Book b1 = new Book();
        int authorAge = b1.Author.Age; // You never initialized the Author property.
                                       // there is no Person to get an Age from.
    }
}
If you want to avoid the child (Person) null reference, you could initialize it in the parent (Book) object's constructor.

Nested Object Initializers
The same applies to nested object initializers:

Book b1 = new Book { Author = { Age = 45 } };
This translates to

Book b1 = new Book();
b1.Author.Age = 45;
While the new keyword is used, it only creates a new instance of Book, but not a new instance of Person, so the Author the property is still null.

Nested Collection Initializers
public class Person {
    public ICollection<Book> Books { get; set; }
}
public class Book {
    public string Title { get; set; }
}
The nested collection initializers behave the same:

Person p1 = new Person {
    Books = {
        new Book { Title = "Title1" },
        new Book { Title = "Title2" },
    }
};
This translates to

Person p1 = new Person();
p1.Books.Add(new Book { Title = "Title1" });
p1.Books.Add(new Book { Title = "Title2" });
The new Person only creates an instance of Person, but the Books collection is still null. The collection initializer syntax does not create a collection for p1.Books, it only translates to the p1.Books.Add(...) statements.

Array
int[] numbers = null;
int n = numbers[0]; // numbers is null. There is no array to index.
Array Elements
Person[] people = new Person[5];
people[0].Age = 20 // people[0] is null. The array was allocated but not
                   // initialized. There is no Person to set the Age for.
Jagged Arrays
long[][] array = new long[1][];
array[0][0] = 3; // is null because only the first dimension is yet initialized.
                 // Use array[0] = new long[2]; first.
Collection/List/Dictionary
Dictionary<string, int> agesForNames = null;
int age = agesForNames["Bob"]; // agesForNames is null.
                               // There is no Dictionary to perform the lookup.
Range Variable (Indirect/Deferred)
public class Person {
    public string Name { get; set; }
}
var people = new List<Person>();
people.Add(null);
var names = from p in people select p.Name;
string firstName = names.First(); // Exception is thrown here, but actually occurs
                                  // on the line above.  "p" is null because the
                                  // first element we added to the list is null.
Events
public class Demo
{
    public event EventHandler StateChanged;

    protected virtual void OnStateChanged(EventArgs e)
    {        
        StateChanged(this, e); // Exception is thrown here 
                               // if no event handlers have been attached
                               // to StateChanged event
    }
}
Bad Naming Conventions:
If you named fields differently from locals, you might have realized that you never initialized the field.

public class Form1 {
    private Customer customer;

    private void Form1_Load(object sender, EventArgs e) {
        Customer customer = new Customer();
        customer.Name = "John";
    }

    private void Button_Click(object sender, EventArgs e) {
        MessageBox.Show(customer.Name);
    }
}
This can be solved by following the convention to prefix fields with an underscore:

private Customer _customer;
ASP.NET Page Life cycle:
public partial class Issues_Edit : System.Web.UI.Page
{
    protected TestIssue myIssue;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            // Only called on first load, not when button clicked
            myIssue = new TestIssue(); 
        }
    }

    protected void SaveButton_Click(object sender, EventArgs e)
    {
        myIssue.Entry = "NullReferenceException here!";
    }
}
ASP.NET Session Values
// if the "FirstName" session value has not yet been set,
// then this line will throw a NullReferenceException
string firstName = Session["FirstName"].ToString();
ASP.NET MVC empty view models
If the exception occurs when referencing a property of @Model in an ASP.NET MVC view, you need to understand that the Model gets set in your action method, when you return a view. When you return an empty model (or model property) from your controller, the exception occurs when the views access it:

// Controller
public class Restaurant:Controller
{
    public ActionResult Search()
    {
         return View();  // Forgot the provide a Model here.
    }
}

// Razor view 
@foreach (var restaurantSearch in Model.RestaurantSearch)  // Throws.
{
}

<p>@Model.somePropertyName</p> <!-- Also throws -->
WPF Control Creation Order and Events
WPF controls are created during the call to InitializeComponent in the order they appear in the visual tree. A NullReferenceException will be raised in the case of early-created controls with event handlers, etc. , that fire during InitializeComponent which reference late-created controls.

For example :

<Grid>
    <!-- Combobox declared first -->
    <ComboBox Name="comboBox1" 
              Margin="10"
              SelectedIndex="0" 
              SelectionChanged="comboBox1_SelectionChanged">
        <ComboBoxItem Content="Item 1" />
        <ComboBoxItem Content="Item 2" />
        <ComboBoxItem Content="Item 3" />
    </ComboBox>

    <!-- Label declared later -->
    <Label Name="label1" 
           Content="Label"
           Margin="10" />
</Grid>
Here comboBox1 is created before label1. If comboBox1_SelectionChanged attempts to reference `label1, it will not yet have been created.

private void comboBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    label1.Content = comboBox1.SelectedIndex.ToString(); // NullReference here!!
}
Changing the order of the declarations in the XAML (i.e., listing label1 before comboBox1, ignoring issues of design philosophy, would at least resolve the NullReferenceException here.

Cast with as
var myThing = someObject as Thing;
This doesn't throw an InvalidCastException but returns a null when the cast fails (and when someObject is itself null). So be aware of that.

LINQ FirstOrDefault() and SingleOrDefault()
The plain versions First() and Single() throw exceptions when there is nothing. The "OrDefault" versions return null in that case. So be aware of that.

foreach
foreach throws when you try to iterate null collection. Usually caused by unexpected null result from methods that return collections.

 List<int> list = null;    
 foreach(var v in list) { } // exception
More realistic example - select nodes from XML document. Will throw if nodes are not found but initial debugging shows that all properties valid:

 foreach (var node in myData.MyXml.DocumentNode.SelectNodes("//Data"))
Ways to Avoid
Explicitly check for null and ignore null values.
If you expect the reference sometimes to be null, you can check for it being null before accessing instance members:

void PrintName(Person p) {
    if (p != null) {
        Console.WriteLine(p.Name);
    }
}
Explicitly check for null and provide a default value.
Methods call you expect to return an instance can return null, for example when the object being sought cannot be found. You can choose to return a default value when this is the case:

string GetCategory(Book b) {
    if (b == null)
        return "Unknown";
    return b.Category;
}
Explicitly check for null from method calls and throw a custom exception.
You can also throw a custom exception, only to catch it in the calling code:

string GetCategory(string bookTitle) {
    var book = library.FindBook(bookTitle);  // This may return null
    if (book == null)
        throw new BookNotFoundException(bookTitle);  // Your custom exception
    return book.Category;
}
Use Debug.Assert if a value should never be null, to catch the problem earlier than the exception occurs.
When you know during development that a method maybe can, but never should return null, you can use Debug.Assert() to break as soon as possible when it does occur:

string GetTitle(int knownBookID) {
    // You know this should never return null.
    var book = library.GetBook(knownBookID);  

    // Exception will occur on the next line instead of at the end of this method.
    Debug.Assert(book != null, "Library didn't return a book for known book ID.");

    // Some other code

    return book.Title; // Will never throw NullReferenceException in Debug mode.
}
Though this check will not end up in your release build, causing it to throw the NullReferenceException again when book == null at runtime in release mode.

Use GetValueOrDefault() for nullable value types to provide a default value when they are null.
DateTime? appointment = null;
Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now));
// Will display the default value provided (DateTime.Now), because appointment is null.

appointment = new DateTime(2022, 10, 20);
Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now));
// Will display the appointment date, not the default
Use the null coalescing operator: ?? [C#] or If() [VB].
The shorthand to providing a default value when a null is encountered:

IService CreateService(ILogger log, Int32? frobPowerLevel)
{
    var serviceImpl = new MyService(log ?? NullLog.Instance);

    // Note that the above "GetValueOrDefault()" can also be rewritten to use
    // the coalesce operator:
    serviceImpl.FrobPowerLevel = frobPowerLevel ?? 5;
}
Use the null condition operator: ?. or ?[x] for arrays (available in C# 6 and VB.NET 14):
This is also sometimes called the safe navigation or Elvis (after its shape) operator. If the expression on the left side of the operator is null, then the right side will not be evaluated, and null is returned instead. That means cases like this:

var title = person.Title.ToUpper();
If the person does not have a title, this will throw an exception because it is trying to call ToUpper on a property with a null value.

In C# 5 and below, this can be guarded with:

var title = person.Title == null ? null : person.Title.ToUpper();
Now the title variable will be null instead of throwing an exception. C# 6 introduces a shorter syntax for this:

var title = person.Title?.ToUpper();
This will result in the title variable being null, and the call to ToUpper is not made if person.Title is null.]]></description>
    <tags>
      <tag>What</tag>
      <tag>is</tag>
      <tag>a</tag>
      <tag>NullReferenceException,</tag>
      <tag>and</tag>
      <tag>how</tag>
      <tag>do</tag>
      <tag>I</tag>
      <tag>fix</tag>
      <tag>it?</tag>
      <tag>You</tag>
      <tag>are</tag>
      <tag>trying</tag>
      <tag>to</tag>
      <tag>use</tag>
      <tag>something</tag>
      <tag>that</tag>
      <tag>is</tag>
      <tag>null</tag>
      <tag>(or</tag>
      <tag>Nothing</tag>
      <tag>in</tag>
      <tag>VB.NET).</tag>
      <tag>This</tag>
      <tag>means</tag>
      <tag>you</tag>
      <tag>either</tag>
      <tag>set</tag>
      <tag>it</tag>
      <tag>to</tag>
      <tag>null,</tag>
      <tag>or</tag>
      <tag>you</tag>
      <tag>never</tag>
      <tag>set</tag>
      <tag>it</tag>
      <tag>to</tag>
      <tag>anything</tag>
      <tag>at</tag>
      <tag>all.</tag>
      <tag>Like</tag>
      <tag>anything</tag>
      <tag>else,</tag>
      <tag>null</tag>
      <tag>gets</tag>
      <tag>passed</tag>
      <tag>around.</tag>
      <tag>If</tag>
      <tag>it</tag>
      <tag>is</tag>
      <tag>null</tag>
      <tag>in</tag>
      <tag>method</tag>
      <tag>"A",</tag>
      <tag>it</tag>
      <tag>could</tag>
      <tag>be</tag>
      <tag>that</tag>
      <tag>method</tag>
      <tag>"B"</tag>
      <tag>passed</tag>
      <tag>a</tag>
      <tag>null</tag>
      <tag>to</tag>
      <tag>method</tag>
      <tag>"A".</tag>
      <tag>null</tag>
      <tag>can</tag>
      <tag>have</tag>
      <tag>different</tag>
      <tag>meanings:</tag>
      <tag>Object</tag>
      <tag>variables</tag>
      <tag>which</tag>
      <tag>are</tag>
      <tag>uninitialized</tag>
      <tag>and</tag>
      <tag>hence</tag>
      <tag>point</tag>
      <tag>to</tag>
      <tag>nothing.</tag>
      <tag>In</tag>
      <tag>this</tag>
      <tag>case,</tag>
      <tag>if</tag>
      <tag>you</tag>
      <tag>access</tag>
      <tag>properties</tag>
      <tag>or</tag>
      <tag>methods</tag>
      <tag>of</tag>
      <tag>such</tag>
      <tag>objects,</tag>
      <tag>it</tag>
      <tag>causes</tag>
      <tag>a</tag>
      <tag>NullReferenceException.</tag>
      <tag>The</tag>
      <tag>developer</tag>
      <tag>is</tag>
      <tag>using</tag>
      <tag>null</tag>
      <tag>intentionally</tag>
      <tag>to</tag>
      <tag>indicate</tag>
      <tag>there</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>meaningful</tag>
      <tag>value</tag>
      <tag>available.</tag>
      <tag>Note</tag>
      <tag>that</tag>
      <tag>C#</tag>
      <tag>has</tag>
      <tag>the</tag>
      <tag>concept</tag>
      <tag>of</tag>
      <tag>nullable</tag>
      <tag>datatypes</tag>
      <tag>for</tag>
      <tag>variables</tag>
      <tag>(like</tag>
      <tag>database</tag>
      <tag>tables</tag>
      <tag>can</tag>
      <tag>have</tag>
      <tag>nullable</tag>
      <tag>fields)</tag>
      <tag>-</tag>
      <tag>you</tag>
      <tag>can</tag>
      <tag>assign</tag>
      <tag>null</tag>
      <tag>to</tag>
      <tag>them</tag>
      <tag>to</tag>
      <tag>indicate</tag>
      <tag>there</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>value</tag>
      <tag>stored</tag>
      <tag>in</tag>
      <tag>it,</tag>
      <tag>for</tag>
      <tag>example</tag>
      <tag>int?</tag>
      <tag>a</tag>
      <tag>=</tag>
      <tag>null;</tag>
      <tag>where</tag>
      <tag>the</tag>
      <tag>question</tag>
      <tag>mark</tag>
      <tag>indicates</tag>
      <tag>it</tag>
      <tag>is</tag>
      <tag>allowed</tag>
      <tag>to</tag>
      <tag>store</tag>
      <tag>null</tag>
      <tag>in</tag>
      <tag>variable</tag>
      <tag>a.</tag>
      <tag>You</tag>
      <tag>can</tag>
      <tag>check</tag>
      <tag>that</tag>
      <tag>either</tag>
      <tag>with</tag>
      <tag>if</tag>
      <tag>(a.HasValue)</tag>
      <tag>{...}</tag>
      <tag>or</tag>
      <tag>with</tag>
      <tag>if</tag>
      <tag>(a==null)</tag>
      <tag>{...}.</tag>
      <tag>Nullable</tag>
      <tag>variables,</tag>
      <tag>like</tag>
      <tag>a</tag>
      <tag>this</tag>
      <tag>example,</tag>
      <tag>allow</tag>
      <tag>to</tag>
      <tag>access</tag>
      <tag>the</tag>
      <tag>value</tag>
      <tag>via</tag>
      <tag>a.Value</tag>
      <tag>explicitly,</tag>
      <tag>or</tag>
      <tag>just</tag>
      <tag>as</tag>
      <tag>normal</tag>
      <tag>via</tag>
      <tag>a.</tag>
      <tag>Note</tag>
      <tag>that</tag>
      <tag>accessing</tag>
      <tag>it</tag>
      <tag>via</tag>
      <tag>a.Value</tag>
      <tag>throws</tag>
      <tag>an</tag>
      <tag>InvalidOperationException</tag>
      <tag>instead</tag>
      <tag>of</tag>
      <tag>a</tag>
      <tag>NullReferenceException</tag>
      <tag>if</tag>
      <tag>a</tag>
      <tag>is</tag>
      <tag>null</tag>
      <tag>-</tag>
      <tag>you</tag>
      <tag>should</tag>
      <tag>do</tag>
      <tag>the</tag>
      <tag>check</tag>
      <tag>beforehand,</tag>
      <tag>i.e.</tag>
      <tag>if</tag>
      <tag>you</tag>
      <tag>have</tag>
      <tag>another</tag>
      <tag>on-nullable</tag>
      <tag>variable</tag>
      <tag>int</tag>
      <tag>b;</tag>
      <tag>then</tag>
      <tag>you</tag>
      <tag>should</tag>
      <tag>do</tag>
      <tag>assignments</tag>
      <tag>like</tag>
      <tag>if</tag>
      <tag>(a.HasValue)</tag>
      <tag>{</tag>
      <tag>b</tag>
      <tag>=</tag>
      <tag>a.Value;</tag>
      <tag>}</tag>
      <tag>or</tag>
      <tag>shorter</tag>
      <tag>if</tag>
      <tag>(a</tag>
      <tag>!=</tag>
      <tag>null)</tag>
      <tag>{</tag>
      <tag>b</tag>
      <tag>=</tag>
      <tag>a;</tag>
      <tag>}.</tag>
      <tag>The</tag>
      <tag>rest</tag>
      <tag>of</tag>
      <tag>this</tag>
      <tag>article</tag>
      <tag>goes</tag>
      <tag>into</tag>
      <tag>more</tag>
      <tag>detail</tag>
      <tag>and</tag>
      <tag>shows</tag>
      <tag>mistakes</tag>
      <tag>that</tag>
      <tag>many</tag>
      <tag>programmers</tag>
      <tag>often</tag>
      <tag>make</tag>
      <tag>which</tag>
      <tag>can</tag>
      <tag>lead</tag>
      <tag>to</tag>
      <tag>a</tag>
      <tag>NullReferenceException.</tag>
      <tag>More</tag>
      <tag>Specifically</tag>
      <tag>The</tag>
      <tag>runtime</tag>
      <tag>throwing</tag>
      <tag>a</tag>
      <tag>NullReferenceException</tag>
      <tag>always</tag>
      <tag>means</tag>
      <tag>the</tag>
      <tag>same</tag>
      <tag>thing:</tag>
      <tag>you</tag>
      <tag>are</tag>
      <tag>trying</tag>
      <tag>to</tag>
      <tag>use</tag>
      <tag>a</tag>
      <tag>reference,</tag>
      <tag>and</tag>
      <tag>the</tag>
      <tag>reference</tag>
      <tag>is</tag>
      <tag>not</tag>
      <tag>initialized</tag>
      <tag>(or</tag>
      <tag>it</tag>
      <tag>was</tag>
      <tag>once</tag>
      <tag>initialized,</tag>
      <tag>but</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>longer</tag>
      <tag>initialized).</tag>
      <tag>This</tag>
      <tag>means</tag>
      <tag>the</tag>
      <tag>reference</tag>
      <tag>is</tag>
      <tag>null,</tag>
      <tag>and</tag>
      <tag>you</tag>
      <tag>cannot</tag>
      <tag>access</tag>
      <tag>members</tag>
      <tag>(such</tag>
      <tag>as</tag>
      <tag>methods)</tag>
      <tag>through</tag>
      <tag>a</tag>
      <tag>null</tag>
      <tag>reference.</tag>
      <tag>The</tag>
      <tag>simplest</tag>
      <tag>case:</tag>
      <tag>string</tag>
      <tag>foo</tag>
      <tag>=</tag>
      <tag>null;</tag>
      <tag>foo.ToUpper();</tag>
      <tag>This</tag>
      <tag>will</tag>
      <tag>throw</tag>
      <tag>a</tag>
      <tag>NullReferenceException</tag>
      <tag>at</tag>
      <tag>the</tag>
      <tag>second</tag>
      <tag>line</tag>
      <tag>because</tag>
      <tag>you</tag>
      <tag>can't</tag>
      <tag>call</tag>
      <tag>the</tag>
      <tag>instance</tag>
      <tag>method</tag>
      <tag>ToUpper()</tag>
      <tag>on</tag>
      <tag>a</tag>
      <tag>string</tag>
      <tag>reference</tag>
      <tag>pointing</tag>
      <tag>to</tag>
      <tag>null.</tag>
      <tag>Debugging</tag>
      <tag>How</tag>
      <tag>do</tag>
      <tag>you</tag>
      <tag>find</tag>
      <tag>the</tag>
      <tag>source</tag>
      <tag>of</tag>
      <tag>a</tag>
      <tag>NullReferenceException?</tag>
      <tag>Apart</tag>
      <tag>from</tag>
      <tag>looking</tag>
      <tag>at</tag>
      <tag>the</tag>
      <tag>exception</tag>
      <tag>itself,</tag>
      <tag>which</tag>
      <tag>will</tag>
      <tag>be</tag>
      <tag>thrown</tag>
      <tag>exactly</tag>
      <tag>at</tag>
      <tag>the</tag>
      <tag>location</tag>
      <tag>where</tag>
      <tag>it</tag>
      <tag>occurs,</tag>
      <tag>the</tag>
      <tag>general</tag>
      <tag>rules</tag>
      <tag>of</tag>
      <tag>debugging</tag>
      <tag>in</tag>
      <tag>Visual</tag>
      <tag>Studio</tag>
      <tag>apply:</tag>
      <tag>place</tag>
      <tag>strategic</tag>
      <tag>breakpoints</tag>
      <tag>and</tag>
      <tag>inspect</tag>
      <tag>your</tag>
      <tag>variables,</tag>
      <tag>either</tag>
      <tag>by</tag>
      <tag>hovering</tag>
      <tag>the</tag>
      <tag>mouse</tag>
      <tag>over</tag>
      <tag>their</tag>
      <tag>names,</tag>
      <tag>opening</tag>
      <tag>a</tag>
      <tag>(Quick)Watch</tag>
      <tag>window</tag>
      <tag>or</tag>
      <tag>using</tag>
      <tag>the</tag>
      <tag>various</tag>
      <tag>debugging</tag>
      <tag>panels</tag>
      <tag>like</tag>
      <tag>Locals</tag>
      <tag>and</tag>
      <tag>Autos.</tag>
      <tag>If</tag>
      <tag>you</tag>
      <tag>want</tag>
      <tag>to</tag>
      <tag>find</tag>
      <tag>out</tag>
      <tag>where</tag>
      <tag>the</tag>
      <tag>reference</tag>
      <tag>is</tag>
      <tag>or</tag>
      <tag>isn't</tag>
      <tag>set,</tag>
      <tag>right-click</tag>
      <tag>its</tag>
      <tag>name</tag>
      <tag>and</tag>
      <tag>select</tag>
      <tag>"Find</tag>
      <tag>All</tag>
      <tag>References".</tag>
      <tag>You</tag>
      <tag>can</tag>
      <tag>then</tag>
      <tag>place</tag>
      <tag>a</tag>
      <tag>breakpoint</tag>
      <tag>at</tag>
      <tag>every</tag>
      <tag>found</tag>
      <tag>location</tag>
      <tag>and</tag>
      <tag>run</tag>
      <tag>your</tag>
      <tag>program</tag>
      <tag>with</tag>
      <tag>the</tag>
      <tag>debugger</tag>
      <tag>attached.</tag>
      <tag>Every</tag>
      <tag>time</tag>
      <tag>the</tag>
      <tag>debugger</tag>
      <tag>breaks</tag>
      <tag>on</tag>
      <tag>such</tag>
      <tag>a</tag>
      <tag>breakpoint,</tag>
      <tag>you</tag>
      <tag>need</tag>
      <tag>to</tag>
      <tag>determine</tag>
      <tag>whether</tag>
      <tag>you</tag>
      <tag>expect</tag>
      <tag>the</tag>
      <tag>reference</tag>
      <tag>to</tag>
      <tag>be</tag>
      <tag>non-null,</tag>
      <tag>inspect</tag>
      <tag>the</tag>
      <tag>variable</tag>
      <tag>and</tag>
      <tag>and</tag>
      <tag>verify</tag>
      <tag>that</tag>
      <tag>it</tag>
      <tag>points</tag>
      <tag>to</tag>
      <tag>an</tag>
      <tag>instance</tag>
      <tag>when</tag>
      <tag>you</tag>
      <tag>expect</tag>
      <tag>it</tag>
      <tag>to.</tag>
      <tag>By</tag>
      <tag>following</tag>
      <tag>the</tag>
      <tag>program</tag>
      <tag>flow</tag>
      <tag>this</tag>
      <tag>way,</tag>
      <tag>you</tag>
      <tag>can</tag>
      <tag>find</tag>
      <tag>the</tag>
      <tag>location</tag>
      <tag>where</tag>
      <tag>the</tag>
      <tag>instance</tag>
      <tag>should</tag>
      <tag>not</tag>
      <tag>be</tag>
      <tag>null,</tag>
      <tag>and</tag>
      <tag>why</tag>
      <tag>it</tag>
      <tag>isn't</tag>
      <tag>properly</tag>
      <tag>set.</tag>
      <tag>Examples</tag>
      <tag>Some</tag>
      <tag>common</tag>
      <tag>scenarios</tag>
      <tag>where</tag>
      <tag>the</tag>
      <tag>exception</tag>
      <tag>can</tag>
      <tag>be</tag>
      <tag>thrown:</tag>
      <tag>Generic</tag>
      <tag>ref1.ref2.ref3.member</tag>
      <tag>If</tag>
      <tag>ref1</tag>
      <tag>or</tag>
      <tag>ref2</tag>
      <tag>or</tag>
      <tag>ref3</tag>
      <tag>is</tag>
      <tag>null,</tag>
      <tag>then</tag>
      <tag>you'll</tag>
      <tag>get</tag>
      <tag>a</tag>
      <tag>NullReferenceException.</tag>
      <tag>If</tag>
      <tag>you</tag>
      <tag>want</tag>
      <tag>to</tag>
      <tag>solve</tag>
      <tag>the</tag>
      <tag>problem,</tag>
      <tag>then</tag>
      <tag>find</tag>
      <tag>out</tag>
      <tag>which</tag>
      <tag>one</tag>
      <tag>is</tag>
      <tag>null</tag>
      <tag>by</tag>
      <tag>rewriting</tag>
      <tag>the</tag>
      <tag>expression</tag>
      <tag>to</tag>
      <tag>its</tag>
      <tag>simpler</tag>
      <tag>equivalent:</tag>
      <tag>var</tag>
      <tag>r1</tag>
      <tag>=</tag>
      <tag>ref1;</tag>
      <tag>var</tag>
      <tag>r2</tag>
      <tag>=</tag>
      <tag>r1.ref2;</tag>
      <tag>var</tag>
      <tag>r3</tag>
      <tag>=</tag>
      <tag>r2.ref3;</tag>
      <tag>r3.member</tag>
      <tag>Specifically,</tag>
      <tag>in</tag>
      <tag>HttpContext.Current.User.Identity.Name,</tag>
      <tag>the</tag>
      <tag>HttpContext.Current</tag>
      <tag>could</tag>
      <tag>be</tag>
      <tag>null,</tag>
      <tag>or</tag>
      <tag>the</tag>
      <tag>User</tag>
      <tag>property</tag>
      <tag>could</tag>
      <tag>be</tag>
      <tag>null,</tag>
      <tag>or</tag>
      <tag>the</tag>
      <tag>Identity</tag>
      <tag>property</tag>
      <tag>could</tag>
      <tag>be</tag>
      <tag>null.</tag>
      <tag>Indirect</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Person</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>int</tag>
      <tag>Age</tag>
      <tag>{</tag>
      <tag>get;</tag>
      <tag>set;</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Book</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>Person</tag>
      <tag>Author</tag>
      <tag>{</tag>
      <tag>get;</tag>
      <tag>set;</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Example</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>void</tag>
      <tag>Foo()</tag>
      <tag>{</tag>
      <tag>Book</tag>
      <tag>b1</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>Book();</tag>
      <tag>int</tag>
      <tag>authorAge</tag>
      <tag>=</tag>
      <tag>b1.Author.Age;</tag>
      <tag>//</tag>
      <tag>You</tag>
      <tag>never</tag>
      <tag>initialized</tag>
      <tag>the</tag>
      <tag>Author</tag>
      <tag>property.</tag>
      <tag>//</tag>
      <tag>there</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>Person</tag>
      <tag>to</tag>
      <tag>get</tag>
      <tag>an</tag>
      <tag>Age</tag>
      <tag>from.</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>If</tag>
      <tag>you</tag>
      <tag>want</tag>
      <tag>to</tag>
      <tag>avoid</tag>
      <tag>the</tag>
      <tag>child</tag>
      <tag>(Person)</tag>
      <tag>null</tag>
      <tag>reference,</tag>
      <tag>you</tag>
      <tag>could</tag>
      <tag>initialize</tag>
      <tag>it</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>parent</tag>
      <tag>(Book)</tag>
      <tag>object's</tag>
      <tag>constructor.</tag>
      <tag>Nested</tag>
      <tag>Object</tag>
      <tag>Initializers</tag>
      <tag>The</tag>
      <tag>same</tag>
      <tag>applies</tag>
      <tag>to</tag>
      <tag>nested</tag>
      <tag>object</tag>
      <tag>initializers:</tag>
      <tag>Book</tag>
      <tag>b1</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>Book</tag>
      <tag>{</tag>
      <tag>Author</tag>
      <tag>=</tag>
      <tag>{</tag>
      <tag>Age</tag>
      <tag>=</tag>
      <tag>45</tag>
      <tag>}</tag>
      <tag>};</tag>
      <tag>This</tag>
      <tag>translates</tag>
      <tag>to</tag>
      <tag>Book</tag>
      <tag>b1</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>Book();</tag>
      <tag>b1.Author.Age</tag>
      <tag>=</tag>
      <tag>45;</tag>
      <tag>While</tag>
      <tag>the</tag>
      <tag>new</tag>
      <tag>keyword</tag>
      <tag>is</tag>
      <tag>used,</tag>
      <tag>it</tag>
      <tag>only</tag>
      <tag>creates</tag>
      <tag>a</tag>
      <tag>new</tag>
      <tag>instance</tag>
      <tag>of</tag>
      <tag>Book,</tag>
      <tag>but</tag>
      <tag>not</tag>
      <tag>a</tag>
      <tag>new</tag>
      <tag>instance</tag>
      <tag>of</tag>
      <tag>Person,</tag>
      <tag>so</tag>
      <tag>the</tag>
      <tag>Author</tag>
      <tag>the</tag>
      <tag>property</tag>
      <tag>is</tag>
      <tag>still</tag>
      <tag>null.</tag>
      <tag>Nested</tag>
      <tag>Collection</tag>
      <tag>Initializers</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Person</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>ICollection&lt;Book&gt;</tag>
      <tag>Books</tag>
      <tag>{</tag>
      <tag>get;</tag>
      <tag>set;</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Book</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>string</tag>
      <tag>Title</tag>
      <tag>{</tag>
      <tag>get;</tag>
      <tag>set;</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>The</tag>
      <tag>nested</tag>
      <tag>collection</tag>
      <tag>initializers</tag>
      <tag>behave</tag>
      <tag>the</tag>
      <tag>same:</tag>
      <tag>Person</tag>
      <tag>p1</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>Person</tag>
      <tag>{</tag>
      <tag>Books</tag>
      <tag>=</tag>
      <tag>{</tag>
      <tag>new</tag>
      <tag>Book</tag>
      <tag>{</tag>
      <tag>Title</tag>
      <tag>=</tag>
      <tag>"Title1"</tag>
      <tag>},</tag>
      <tag>new</tag>
      <tag>Book</tag>
      <tag>{</tag>
      <tag>Title</tag>
      <tag>=</tag>
      <tag>"Title2"</tag>
      <tag>},</tag>
      <tag>}</tag>
      <tag>};</tag>
      <tag>This</tag>
      <tag>translates</tag>
      <tag>to</tag>
      <tag>Person</tag>
      <tag>p1</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>Person();</tag>
      <tag>p1.Books.Add(new</tag>
      <tag>Book</tag>
      <tag>{</tag>
      <tag>Title</tag>
      <tag>=</tag>
      <tag>"Title1"</tag>
      <tag>});</tag>
      <tag>p1.Books.Add(new</tag>
      <tag>Book</tag>
      <tag>{</tag>
      <tag>Title</tag>
      <tag>=</tag>
      <tag>"Title2"</tag>
      <tag>});</tag>
      <tag>The</tag>
      <tag>new</tag>
      <tag>Person</tag>
      <tag>only</tag>
      <tag>creates</tag>
      <tag>an</tag>
      <tag>instance</tag>
      <tag>of</tag>
      <tag>Person,</tag>
      <tag>but</tag>
      <tag>the</tag>
      <tag>Books</tag>
      <tag>collection</tag>
      <tag>is</tag>
      <tag>still</tag>
      <tag>null.</tag>
      <tag>The</tag>
      <tag>collection</tag>
      <tag>initializer</tag>
      <tag>syntax</tag>
      <tag>does</tag>
      <tag>not</tag>
      <tag>create</tag>
      <tag>a</tag>
      <tag>collection</tag>
      <tag>for</tag>
      <tag>p1.Books,</tag>
      <tag>it</tag>
      <tag>only</tag>
      <tag>translates</tag>
      <tag>to</tag>
      <tag>the</tag>
      <tag>p1.Books.Add(...)</tag>
      <tag>statements.</tag>
      <tag>Array</tag>
      <tag>int[]</tag>
      <tag>numbers</tag>
      <tag>=</tag>
      <tag>null;</tag>
      <tag>int</tag>
      <tag>n</tag>
      <tag>=</tag>
      <tag>numbers[0];</tag>
      <tag>//</tag>
      <tag>numbers</tag>
      <tag>is</tag>
      <tag>null.</tag>
      <tag>There</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>array</tag>
      <tag>to</tag>
      <tag>index.</tag>
      <tag>Array</tag>
      <tag>Elements</tag>
      <tag>Person[]</tag>
      <tag>people</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>Person[5];</tag>
      <tag>people[0].Age</tag>
      <tag>=</tag>
      <tag>20</tag>
      <tag>//</tag>
      <tag>people[0]</tag>
      <tag>is</tag>
      <tag>null.</tag>
      <tag>The</tag>
      <tag>array</tag>
      <tag>was</tag>
      <tag>allocated</tag>
      <tag>but</tag>
      <tag>not</tag>
      <tag>//</tag>
      <tag>initialized.</tag>
      <tag>There</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>Person</tag>
      <tag>to</tag>
      <tag>set</tag>
      <tag>the</tag>
      <tag>Age</tag>
      <tag>for.</tag>
      <tag>Jagged</tag>
      <tag>Arrays</tag>
      <tag>long[][]</tag>
      <tag>array</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>long[1][];</tag>
      <tag>array[0][0]</tag>
      <tag>=</tag>
      <tag>3;</tag>
      <tag>//</tag>
      <tag>is</tag>
      <tag>null</tag>
      <tag>because</tag>
      <tag>only</tag>
      <tag>the</tag>
      <tag>first</tag>
      <tag>dimension</tag>
      <tag>is</tag>
      <tag>yet</tag>
      <tag>initialized.</tag>
      <tag>//</tag>
      <tag>Use</tag>
      <tag>array[0]</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>long[2];</tag>
      <tag>first.</tag>
      <tag>Collection/List/Dictionary</tag>
      <tag>Dictionary&lt;string,</tag>
      <tag>int&gt;</tag>
      <tag>agesForNames</tag>
      <tag>=</tag>
      <tag>null;</tag>
      <tag>int</tag>
      <tag>age</tag>
      <tag>=</tag>
      <tag>agesForNames["Bob"];</tag>
      <tag>//</tag>
      <tag>agesForNames</tag>
      <tag>is</tag>
      <tag>null.</tag>
      <tag>//</tag>
      <tag>There</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>Dictionary</tag>
      <tag>to</tag>
      <tag>perform</tag>
      <tag>the</tag>
      <tag>lookup.</tag>
      <tag>Range</tag>
      <tag>Variable</tag>
      <tag>(Indirect/Deferred)</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Person</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>string</tag>
      <tag>Name</tag>
      <tag>{</tag>
      <tag>get;</tag>
      <tag>set;</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>var</tag>
      <tag>people</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>List&lt;Person&gt;();</tag>
      <tag>people.Add(null);</tag>
      <tag>var</tag>
      <tag>names</tag>
      <tag>=</tag>
      <tag>from</tag>
      <tag>p</tag>
      <tag>in</tag>
      <tag>people</tag>
      <tag>select</tag>
      <tag>p.Name;</tag>
      <tag>string</tag>
      <tag>firstName</tag>
      <tag>=</tag>
      <tag>names.First();</tag>
      <tag>//</tag>
      <tag>Exception</tag>
      <tag>is</tag>
      <tag>thrown</tag>
      <tag>here,</tag>
      <tag>but</tag>
      <tag>actually</tag>
      <tag>occurs</tag>
      <tag>//</tag>
      <tag>on</tag>
      <tag>the</tag>
      <tag>line</tag>
      <tag>above.</tag>
      <tag>"p"</tag>
      <tag>is</tag>
      <tag>null</tag>
      <tag>because</tag>
      <tag>the</tag>
      <tag>//</tag>
      <tag>first</tag>
      <tag>element</tag>
      <tag>we</tag>
      <tag>added</tag>
      <tag>to</tag>
      <tag>the</tag>
      <tag>list</tag>
      <tag>is</tag>
      <tag>null.</tag>
      <tag>Events</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Demo</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>event</tag>
      <tag>EventHandler</tag>
      <tag>StateChanged;</tag>
      <tag>protected</tag>
      <tag>virtual</tag>
      <tag>void</tag>
      <tag>OnStateChanged(EventArgs</tag>
      <tag>e)</tag>
      <tag>{</tag>
      <tag>StateChanged(this,</tag>
      <tag>e);</tag>
      <tag>//</tag>
      <tag>Exception</tag>
      <tag>is</tag>
      <tag>thrown</tag>
      <tag>here</tag>
      <tag>//</tag>
      <tag>if</tag>
      <tag>no</tag>
      <tag>event</tag>
      <tag>handlers</tag>
      <tag>have</tag>
      <tag>been</tag>
      <tag>attached</tag>
      <tag>//</tag>
      <tag>to</tag>
      <tag>StateChanged</tag>
      <tag>event</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>Bad</tag>
      <tag>Naming</tag>
      <tag>Conventions:</tag>
      <tag>If</tag>
      <tag>you</tag>
      <tag>named</tag>
      <tag>fields</tag>
      <tag>differently</tag>
      <tag>from</tag>
      <tag>locals,</tag>
      <tag>you</tag>
      <tag>might</tag>
      <tag>have</tag>
      <tag>realized</tag>
      <tag>that</tag>
      <tag>you</tag>
      <tag>never</tag>
      <tag>initialized</tag>
      <tag>the</tag>
      <tag>field.</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Form1</tag>
      <tag>{</tag>
      <tag>private</tag>
      <tag>Customer</tag>
      <tag>customer;</tag>
      <tag>private</tag>
      <tag>void</tag>
      <tag>Form1_Load(object</tag>
      <tag>sender,</tag>
      <tag>EventArgs</tag>
      <tag>e)</tag>
      <tag>{</tag>
      <tag>Customer</tag>
      <tag>customer</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>Customer();</tag>
      <tag>customer.Name</tag>
      <tag>=</tag>
      <tag>"John";</tag>
      <tag>}</tag>
      <tag>private</tag>
      <tag>void</tag>
      <tag>Button_Click(object</tag>
      <tag>sender,</tag>
      <tag>EventArgs</tag>
      <tag>e)</tag>
      <tag>{</tag>
      <tag>MessageBox.Show(customer.Name);</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>This</tag>
      <tag>can</tag>
      <tag>be</tag>
      <tag>solved</tag>
      <tag>by</tag>
      <tag>following</tag>
      <tag>the</tag>
      <tag>convention</tag>
      <tag>to</tag>
      <tag>prefix</tag>
      <tag>fields</tag>
      <tag>with</tag>
      <tag>an</tag>
      <tag>underscore:</tag>
      <tag>private</tag>
      <tag>Customer</tag>
      <tag>_customer;</tag>
      <tag>ASP.NET</tag>
      <tag>Page</tag>
      <tag>Life</tag>
      <tag>cycle:</tag>
      <tag>public</tag>
      <tag>partial</tag>
      <tag>class</tag>
      <tag>Issues_Edit</tag>
      <tag>:</tag>
      <tag>System.Web.UI.Page</tag>
      <tag>{</tag>
      <tag>protected</tag>
      <tag>TestIssue</tag>
      <tag>myIssue;</tag>
      <tag>protected</tag>
      <tag>void</tag>
      <tag>Page_Load(object</tag>
      <tag>sender,</tag>
      <tag>EventArgs</tag>
      <tag>e)</tag>
      <tag>{</tag>
      <tag>if</tag>
      <tag>(!IsPostBack)</tag>
      <tag>{</tag>
      <tag>//</tag>
      <tag>Only</tag>
      <tag>called</tag>
      <tag>on</tag>
      <tag>first</tag>
      <tag>load,</tag>
      <tag>not</tag>
      <tag>when</tag>
      <tag>button</tag>
      <tag>clicked</tag>
      <tag>myIssue</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>TestIssue();</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>protected</tag>
      <tag>void</tag>
      <tag>SaveButton_Click(object</tag>
      <tag>sender,</tag>
      <tag>EventArgs</tag>
      <tag>e)</tag>
      <tag>{</tag>
      <tag>myIssue.Entry</tag>
      <tag>=</tag>
      <tag>"NullReferenceException</tag>
      <tag>here!";</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>ASP.NET</tag>
      <tag>Session</tag>
      <tag>Values</tag>
      <tag>//</tag>
      <tag>if</tag>
      <tag>the</tag>
      <tag>"FirstName"</tag>
      <tag>session</tag>
      <tag>value</tag>
      <tag>has</tag>
      <tag>not</tag>
      <tag>yet</tag>
      <tag>been</tag>
      <tag>set,</tag>
      <tag>//</tag>
      <tag>then</tag>
      <tag>this</tag>
      <tag>line</tag>
      <tag>will</tag>
      <tag>throw</tag>
      <tag>a</tag>
      <tag>NullReferenceException</tag>
      <tag>string</tag>
      <tag>firstName</tag>
      <tag>=</tag>
      <tag>Session["FirstName"].ToString();</tag>
      <tag>ASP.NET</tag>
      <tag>MVC</tag>
      <tag>empty</tag>
      <tag>view</tag>
      <tag>models</tag>
      <tag>If</tag>
      <tag>the</tag>
      <tag>exception</tag>
      <tag>occurs</tag>
      <tag>when</tag>
      <tag>referencing</tag>
      <tag>a</tag>
      <tag>property</tag>
      <tag>of</tag>
      <tag>@Model</tag>
      <tag>in</tag>
      <tag>an</tag>
      <tag>ASP.NET</tag>
      <tag>MVC</tag>
      <tag>view,</tag>
      <tag>you</tag>
      <tag>need</tag>
      <tag>to</tag>
      <tag>understand</tag>
      <tag>that</tag>
      <tag>the</tag>
      <tag>Model</tag>
      <tag>gets</tag>
      <tag>set</tag>
      <tag>in</tag>
      <tag>your</tag>
      <tag>action</tag>
      <tag>method,</tag>
      <tag>when</tag>
      <tag>you</tag>
      <tag>return</tag>
      <tag>a</tag>
      <tag>view.</tag>
      <tag>When</tag>
      <tag>you</tag>
      <tag>return</tag>
      <tag>an</tag>
      <tag>empty</tag>
      <tag>model</tag>
      <tag>(or</tag>
      <tag>model</tag>
      <tag>property)</tag>
      <tag>from</tag>
      <tag>your</tag>
      <tag>controller,</tag>
      <tag>the</tag>
      <tag>exception</tag>
      <tag>occurs</tag>
      <tag>when</tag>
      <tag>the</tag>
      <tag>views</tag>
      <tag>access</tag>
      <tag>it:</tag>
      <tag>//</tag>
      <tag>Controller</tag>
      <tag>public</tag>
      <tag>class</tag>
      <tag>Restaurant:Controller</tag>
      <tag>{</tag>
      <tag>public</tag>
      <tag>ActionResult</tag>
      <tag>Search()</tag>
      <tag>{</tag>
      <tag>return</tag>
      <tag>View();</tag>
      <tag>//</tag>
      <tag>Forgot</tag>
      <tag>the</tag>
      <tag>provide</tag>
      <tag>a</tag>
      <tag>Model</tag>
      <tag>here.</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>//</tag>
      <tag>Razor</tag>
      <tag>view</tag>
      <tag>@foreach</tag>
      <tag>(var</tag>
      <tag>restaurantSearch</tag>
      <tag>in</tag>
      <tag>Model.RestaurantSearch)</tag>
      <tag>//</tag>
      <tag>Throws.</tag>
      <tag>{</tag>
      <tag>}</tag>
      <tag>&lt;p&gt;@Model.somePropertyName&lt;/p&gt;</tag>
      <tag>&lt;!--</tag>
      <tag>Also</tag>
      <tag>throws</tag>
      <tag>--&gt;</tag>
      <tag>WPF</tag>
      <tag>Control</tag>
      <tag>Creation</tag>
      <tag>Order</tag>
      <tag>and</tag>
      <tag>Events</tag>
      <tag>WPF</tag>
      <tag>controls</tag>
      <tag>are</tag>
      <tag>created</tag>
      <tag>during</tag>
      <tag>the</tag>
      <tag>call</tag>
      <tag>to</tag>
      <tag>InitializeComponent</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>order</tag>
      <tag>they</tag>
      <tag>appear</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>visual</tag>
      <tag>tree.</tag>
      <tag>A</tag>
      <tag>NullReferenceException</tag>
      <tag>will</tag>
      <tag>be</tag>
      <tag>raised</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>case</tag>
      <tag>of</tag>
      <tag>early-created</tag>
      <tag>controls</tag>
      <tag>with</tag>
      <tag>event</tag>
      <tag>handlers,</tag>
      <tag>etc.</tag>
      <tag>,</tag>
      <tag>that</tag>
      <tag>fire</tag>
      <tag>during</tag>
      <tag>InitializeComponent</tag>
      <tag>which</tag>
      <tag>reference</tag>
      <tag>late-created</tag>
      <tag>controls.</tag>
      <tag>For</tag>
      <tag>example</tag>
      <tag>:</tag>
      <tag>&lt;Grid&gt;</tag>
      <tag>&lt;!--</tag>
      <tag>Combobox</tag>
      <tag>declared</tag>
      <tag>first</tag>
      <tag>--&gt;</tag>
      <tag>&lt;ComboBox</tag>
      <tag>Name="comboBox1"</tag>
      <tag>Margin="10"</tag>
      <tag>SelectedIndex="0"</tag>
      <tag>SelectionChanged="comboBox1_SelectionChanged"&gt;</tag>
      <tag>&lt;ComboBoxItem</tag>
      <tag>Content="Item</tag>
      <tag>1"</tag>
      <tag>/&gt;</tag>
      <tag>&lt;ComboBoxItem</tag>
      <tag>Content="Item</tag>
      <tag>2"</tag>
      <tag>/&gt;</tag>
      <tag>&lt;ComboBoxItem</tag>
      <tag>Content="Item</tag>
      <tag>3"</tag>
      <tag>/&gt;</tag>
      <tag>&lt;/ComboBox&gt;</tag>
      <tag>&lt;!--</tag>
      <tag>Label</tag>
      <tag>declared</tag>
      <tag>later</tag>
      <tag>--&gt;</tag>
      <tag>&lt;Label</tag>
      <tag>Name="label1"</tag>
      <tag>Content="Label"</tag>
      <tag>Margin="10"</tag>
      <tag>/&gt;</tag>
      <tag>&lt;/Grid&gt;</tag>
      <tag>Here</tag>
      <tag>comboBox1</tag>
      <tag>is</tag>
      <tag>created</tag>
      <tag>before</tag>
      <tag>label1.</tag>
      <tag>If</tag>
      <tag>comboBox1_SelectionChanged</tag>
      <tag>attempts</tag>
      <tag>to</tag>
      <tag>reference</tag>
      <tag>`label1,</tag>
      <tag>it</tag>
      <tag>will</tag>
      <tag>not</tag>
      <tag>yet</tag>
      <tag>have</tag>
      <tag>been</tag>
      <tag>created.</tag>
      <tag>private</tag>
      <tag>void</tag>
      <tag>comboBox1_SelectionChanged(object</tag>
      <tag>sender,</tag>
      <tag>SelectionChangedEventArgs</tag>
      <tag>e)</tag>
      <tag>{</tag>
      <tag>label1.Content</tag>
      <tag>=</tag>
      <tag>comboBox1.SelectedIndex.ToString();</tag>
      <tag>//</tag>
      <tag>NullReference</tag>
      <tag>here!!</tag>
      <tag>}</tag>
      <tag>Changing</tag>
      <tag>the</tag>
      <tag>order</tag>
      <tag>of</tag>
      <tag>the</tag>
      <tag>declarations</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>XAML</tag>
      <tag>(i.e.,</tag>
      <tag>listing</tag>
      <tag>label1</tag>
      <tag>before</tag>
      <tag>comboBox1,</tag>
      <tag>ignoring</tag>
      <tag>issues</tag>
      <tag>of</tag>
      <tag>design</tag>
      <tag>philosophy,</tag>
      <tag>would</tag>
      <tag>at</tag>
      <tag>least</tag>
      <tag>resolve</tag>
      <tag>the</tag>
      <tag>NullReferenceException</tag>
      <tag>here.</tag>
      <tag>Cast</tag>
      <tag>with</tag>
      <tag>as</tag>
      <tag>var</tag>
      <tag>myThing</tag>
      <tag>=</tag>
      <tag>someObject</tag>
      <tag>as</tag>
      <tag>Thing;</tag>
      <tag>This</tag>
      <tag>doesn't</tag>
      <tag>throw</tag>
      <tag>an</tag>
      <tag>InvalidCastException</tag>
      <tag>but</tag>
      <tag>returns</tag>
      <tag>a</tag>
      <tag>null</tag>
      <tag>when</tag>
      <tag>the</tag>
      <tag>cast</tag>
      <tag>fails</tag>
      <tag>(and</tag>
      <tag>when</tag>
      <tag>someObject</tag>
      <tag>is</tag>
      <tag>itself</tag>
      <tag>null).</tag>
      <tag>So</tag>
      <tag>be</tag>
      <tag>aware</tag>
      <tag>of</tag>
      <tag>that.</tag>
      <tag>LINQ</tag>
      <tag>FirstOrDefault()</tag>
      <tag>and</tag>
      <tag>SingleOrDefault()</tag>
      <tag>The</tag>
      <tag>plain</tag>
      <tag>versions</tag>
      <tag>First()</tag>
      <tag>and</tag>
      <tag>Single()</tag>
      <tag>throw</tag>
      <tag>exceptions</tag>
      <tag>when</tag>
      <tag>there</tag>
      <tag>is</tag>
      <tag>nothing.</tag>
      <tag>The</tag>
      <tag>"OrDefault"</tag>
      <tag>versions</tag>
      <tag>return</tag>
      <tag>null</tag>
      <tag>in</tag>
      <tag>that</tag>
      <tag>case.</tag>
      <tag>So</tag>
      <tag>be</tag>
      <tag>aware</tag>
      <tag>of</tag>
      <tag>that.</tag>
      <tag>foreach</tag>
      <tag>foreach</tag>
      <tag>throws</tag>
      <tag>when</tag>
      <tag>you</tag>
      <tag>try</tag>
      <tag>to</tag>
      <tag>iterate</tag>
      <tag>null</tag>
      <tag>collection.</tag>
      <tag>Usually</tag>
      <tag>caused</tag>
      <tag>by</tag>
      <tag>unexpected</tag>
      <tag>null</tag>
      <tag>result</tag>
      <tag>from</tag>
      <tag>methods</tag>
      <tag>that</tag>
      <tag>return</tag>
      <tag>collections.</tag>
      <tag>List&lt;int&gt;</tag>
      <tag>list</tag>
      <tag>=</tag>
      <tag>null;</tag>
      <tag>foreach(var</tag>
      <tag>v</tag>
      <tag>in</tag>
      <tag>list)</tag>
      <tag>{</tag>
      <tag>}</tag>
      <tag>//</tag>
      <tag>exception</tag>
      <tag>More</tag>
      <tag>realistic</tag>
      <tag>example</tag>
      <tag>-</tag>
      <tag>select</tag>
      <tag>nodes</tag>
      <tag>from</tag>
      <tag>XML</tag>
      <tag>document.</tag>
      <tag>Will</tag>
      <tag>throw</tag>
      <tag>if</tag>
      <tag>nodes</tag>
      <tag>are</tag>
      <tag>not</tag>
      <tag>found</tag>
      <tag>but</tag>
      <tag>initial</tag>
      <tag>debugging</tag>
      <tag>shows</tag>
      <tag>that</tag>
      <tag>all</tag>
      <tag>properties</tag>
      <tag>valid:</tag>
      <tag>foreach</tag>
      <tag>(var</tag>
      <tag>node</tag>
      <tag>in</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//Data"))</tag>
      <tag>Ways</tag>
      <tag>to</tag>
      <tag>Avoid</tag>
      <tag>Explicitly</tag>
      <tag>check</tag>
      <tag>for</tag>
      <tag>null</tag>
      <tag>and</tag>
      <tag>ignore</tag>
      <tag>null</tag>
      <tag>values.</tag>
      <tag>If</tag>
      <tag>you</tag>
      <tag>expect</tag>
      <tag>the</tag>
      <tag>reference</tag>
      <tag>sometimes</tag>
      <tag>to</tag>
      <tag>be</tag>
      <tag>null,</tag>
      <tag>you</tag>
      <tag>can</tag>
      <tag>check</tag>
      <tag>for</tag>
      <tag>it</tag>
      <tag>being</tag>
      <tag>null</tag>
      <tag>before</tag>
      <tag>accessing</tag>
      <tag>instance</tag>
      <tag>members:</tag>
      <tag>void</tag>
      <tag>PrintName(Person</tag>
      <tag>p)</tag>
      <tag>{</tag>
      <tag>if</tag>
      <tag>(p</tag>
      <tag>!=</tag>
      <tag>null)</tag>
      <tag>{</tag>
      <tag>Console.WriteLine(p.Name);</tag>
      <tag>}</tag>
      <tag>}</tag>
      <tag>Explicitly</tag>
      <tag>check</tag>
      <tag>for</tag>
      <tag>null</tag>
      <tag>and</tag>
      <tag>provide</tag>
      <tag>a</tag>
      <tag>default</tag>
      <tag>value.</tag>
      <tag>Methods</tag>
      <tag>call</tag>
      <tag>you</tag>
      <tag>expect</tag>
      <tag>to</tag>
      <tag>return</tag>
      <tag>an</tag>
      <tag>instance</tag>
      <tag>can</tag>
      <tag>return</tag>
      <tag>null,</tag>
      <tag>for</tag>
      <tag>example</tag>
      <tag>when</tag>
      <tag>the</tag>
      <tag>object</tag>
      <tag>being</tag>
      <tag>sought</tag>
      <tag>cannot</tag>
      <tag>be</tag>
      <tag>found.</tag>
      <tag>You</tag>
      <tag>can</tag>
      <tag>choose</tag>
      <tag>to</tag>
      <tag>return</tag>
      <tag>a</tag>
      <tag>default</tag>
      <tag>value</tag>
      <tag>when</tag>
      <tag>this</tag>
      <tag>is</tag>
      <tag>the</tag>
      <tag>case:</tag>
      <tag>string</tag>
      <tag>GetCategory(Book</tag>
      <tag>b)</tag>
      <tag>{</tag>
      <tag>if</tag>
      <tag>(b</tag>
      <tag>==</tag>
      <tag>null)</tag>
      <tag>return</tag>
      <tag>"Unknown";</tag>
      <tag>return</tag>
      <tag>b.Category;</tag>
      <tag>}</tag>
      <tag>Explicitly</tag>
      <tag>check</tag>
      <tag>for</tag>
      <tag>null</tag>
      <tag>from</tag>
      <tag>method</tag>
      <tag>calls</tag>
      <tag>and</tag>
      <tag>throw</tag>
      <tag>a</tag>
      <tag>custom</tag>
      <tag>exception.</tag>
      <tag>You</tag>
      <tag>can</tag>
      <tag>also</tag>
      <tag>throw</tag>
      <tag>a</tag>
      <tag>custom</tag>
      <tag>exception,</tag>
      <tag>only</tag>
      <tag>to</tag>
      <tag>catch</tag>
      <tag>it</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>calling</tag>
      <tag>code:</tag>
      <tag>string</tag>
      <tag>GetCategory(string</tag>
      <tag>bookTitle)</tag>
      <tag>{</tag>
      <tag>var</tag>
      <tag>book</tag>
      <tag>=</tag>
      <tag>library.FindBook(bookTitle);</tag>
      <tag>//</tag>
      <tag>This</tag>
      <tag>may</tag>
      <tag>return</tag>
      <tag>null</tag>
      <tag>if</tag>
      <tag>(book</tag>
      <tag>==</tag>
      <tag>null)</tag>
      <tag>throw</tag>
      <tag>new</tag>
      <tag>BookNotFoundException(bookTitle);</tag>
      <tag>//</tag>
      <tag>Your</tag>
      <tag>custom</tag>
      <tag>exception</tag>
      <tag>return</tag>
      <tag>book.Category;</tag>
      <tag>}</tag>
      <tag>Use</tag>
      <tag>Debug.Assert</tag>
      <tag>if</tag>
      <tag>a</tag>
      <tag>value</tag>
      <tag>should</tag>
      <tag>never</tag>
      <tag>be</tag>
      <tag>null,</tag>
      <tag>to</tag>
      <tag>catch</tag>
      <tag>the</tag>
      <tag>problem</tag>
      <tag>earlier</tag>
      <tag>than</tag>
      <tag>the</tag>
      <tag>exception</tag>
      <tag>occurs.</tag>
      <tag>When</tag>
      <tag>you</tag>
      <tag>know</tag>
      <tag>during</tag>
      <tag>development</tag>
      <tag>that</tag>
      <tag>a</tag>
      <tag>method</tag>
      <tag>maybe</tag>
      <tag>can,</tag>
      <tag>but</tag>
      <tag>never</tag>
      <tag>should</tag>
      <tag>return</tag>
      <tag>null,</tag>
      <tag>you</tag>
      <tag>can</tag>
      <tag>use</tag>
      <tag>Debug.Assert()</tag>
      <tag>to</tag>
      <tag>break</tag>
      <tag>as</tag>
      <tag>soon</tag>
      <tag>as</tag>
      <tag>possible</tag>
      <tag>when</tag>
      <tag>it</tag>
      <tag>does</tag>
      <tag>occur:</tag>
      <tag>string</tag>
      <tag>GetTitle(int</tag>
      <tag>knownBookID)</tag>
      <tag>{</tag>
      <tag>//</tag>
      <tag>You</tag>
      <tag>know</tag>
      <tag>this</tag>
      <tag>should</tag>
      <tag>never</tag>
      <tag>return</tag>
      <tag>null.</tag>
      <tag>var</tag>
      <tag>book</tag>
      <tag>=</tag>
      <tag>library.GetBook(knownBookID);</tag>
      <tag>//</tag>
      <tag>Exception</tag>
      <tag>will</tag>
      <tag>occur</tag>
      <tag>on</tag>
      <tag>the</tag>
      <tag>next</tag>
      <tag>line</tag>
      <tag>instead</tag>
      <tag>of</tag>
      <tag>at</tag>
      <tag>the</tag>
      <tag>end</tag>
      <tag>of</tag>
      <tag>this</tag>
      <tag>method.</tag>
      <tag>Debug.Assert(book</tag>
      <tag>!=</tag>
      <tag>null,</tag>
      <tag>"Library</tag>
      <tag>didn't</tag>
      <tag>return</tag>
      <tag>a</tag>
      <tag>book</tag>
      <tag>for</tag>
      <tag>known</tag>
      <tag>book</tag>
      <tag>ID.");</tag>
      <tag>//</tag>
      <tag>Some</tag>
      <tag>other</tag>
      <tag>code</tag>
      <tag>return</tag>
      <tag>book.Title;</tag>
      <tag>//</tag>
      <tag>Will</tag>
      <tag>never</tag>
      <tag>throw</tag>
      <tag>NullReferenceException</tag>
      <tag>in</tag>
      <tag>Debug</tag>
      <tag>mode.</tag>
      <tag>}</tag>
      <tag>Though</tag>
      <tag>this</tag>
      <tag>check</tag>
      <tag>will</tag>
      <tag>not</tag>
      <tag>end</tag>
      <tag>up</tag>
      <tag>in</tag>
      <tag>your</tag>
      <tag>release</tag>
      <tag>build,</tag>
      <tag>causing</tag>
      <tag>it</tag>
      <tag>to</tag>
      <tag>throw</tag>
      <tag>the</tag>
      <tag>NullReferenceException</tag>
      <tag>again</tag>
      <tag>when</tag>
      <tag>book</tag>
      <tag>==</tag>
      <tag>null</tag>
      <tag>at</tag>
      <tag>runtime</tag>
      <tag>in</tag>
      <tag>release</tag>
      <tag>mode.</tag>
      <tag>Use</tag>
      <tag>GetValueOrDefault()</tag>
      <tag>for</tag>
      <tag>nullable</tag>
      <tag>value</tag>
      <tag>types</tag>
      <tag>to</tag>
      <tag>provide</tag>
      <tag>a</tag>
      <tag>default</tag>
      <tag>value</tag>
      <tag>when</tag>
      <tag>they</tag>
      <tag>are</tag>
      <tag>null.</tag>
      <tag>DateTime?</tag>
      <tag>appointment</tag>
      <tag>=</tag>
      <tag>null;</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now));</tag>
      <tag>//</tag>
      <tag>Will</tag>
      <tag>display</tag>
      <tag>the</tag>
      <tag>default</tag>
      <tag>value</tag>
      <tag>provided</tag>
      <tag>(DateTime.Now),</tag>
      <tag>because</tag>
      <tag>appointment</tag>
      <tag>is</tag>
      <tag>null.</tag>
      <tag>appointment</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>DateTime(2022,</tag>
      <tag>10,</tag>
      <tag>20);</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now));</tag>
      <tag>//</tag>
      <tag>Will</tag>
      <tag>display</tag>
      <tag>the</tag>
      <tag>appointment</tag>
      <tag>date,</tag>
      <tag>not</tag>
      <tag>the</tag>
      <tag>default</tag>
      <tag>Use</tag>
      <tag>the</tag>
      <tag>null</tag>
      <tag>coalescing</tag>
      <tag>operator:</tag>
      <tag>??</tag>
      <tag>[C#]</tag>
      <tag>or</tag>
      <tag>If()</tag>
      <tag>[VB].</tag>
      <tag>The</tag>
      <tag>shorthand</tag>
      <tag>to</tag>
      <tag>providing</tag>
      <tag>a</tag>
      <tag>default</tag>
      <tag>value</tag>
      <tag>when</tag>
      <tag>a</tag>
      <tag>null</tag>
      <tag>is</tag>
      <tag>encountered:</tag>
      <tag>IService</tag>
      <tag>CreateService(ILogger</tag>
      <tag>log,</tag>
      <tag>Int32?</tag>
      <tag>frobPowerLevel)</tag>
      <tag>{</tag>
      <tag>var</tag>
      <tag>serviceImpl</tag>
      <tag>=</tag>
      <tag>new</tag>
      <tag>MyService(log</tag>
      <tag>??</tag>
      <tag>NullLog.Instance);</tag>
      <tag>//</tag>
      <tag>Note</tag>
      <tag>that</tag>
      <tag>the</tag>
      <tag>above</tag>
      <tag>"GetValueOrDefault()"</tag>
      <tag>can</tag>
      <tag>also</tag>
      <tag>be</tag>
      <tag>rewritten</tag>
      <tag>to</tag>
      <tag>use</tag>
      <tag>//</tag>
      <tag>the</tag>
      <tag>coalesce</tag>
      <tag>operator:</tag>
      <tag>serviceImpl.FrobPowerLevel</tag>
      <tag>=</tag>
      <tag>frobPowerLevel</tag>
      <tag>??</tag>
      <tag>5;</tag>
      <tag>}</tag>
      <tag>Use</tag>
      <tag>the</tag>
      <tag>null</tag>
      <tag>condition</tag>
      <tag>operator:</tag>
      <tag>?.</tag>
      <tag>or</tag>
      <tag>?[x]</tag>
      <tag>for</tag>
      <tag>arrays</tag>
      <tag>(available</tag>
      <tag>in</tag>
      <tag>C#</tag>
      <tag>6</tag>
      <tag>and</tag>
      <tag>VB.NET</tag>
      <tag>14):</tag>
      <tag>This</tag>
      <tag>is</tag>
      <tag>also</tag>
      <tag>sometimes</tag>
      <tag>called</tag>
      <tag>the</tag>
      <tag>safe</tag>
      <tag>navigation</tag>
      <tag>or</tag>
      <tag>Elvis</tag>
      <tag>(after</tag>
      <tag>its</tag>
      <tag>shape)</tag>
      <tag>operator.</tag>
      <tag>If</tag>
      <tag>the</tag>
      <tag>expression</tag>
      <tag>on</tag>
      <tag>the</tag>
      <tag>left</tag>
      <tag>side</tag>
      <tag>of</tag>
      <tag>the</tag>
      <tag>operator</tag>
      <tag>is</tag>
      <tag>null,</tag>
      <tag>then</tag>
      <tag>the</tag>
      <tag>right</tag>
      <tag>side</tag>
      <tag>will</tag>
      <tag>not</tag>
      <tag>be</tag>
      <tag>evaluated,</tag>
      <tag>and</tag>
      <tag>null</tag>
      <tag>is</tag>
      <tag>returned</tag>
      <tag>instead.</tag>
      <tag>That</tag>
      <tag>means</tag>
      <tag>cases</tag>
      <tag>like</tag>
      <tag>this:</tag>
      <tag>var</tag>
      <tag>title</tag>
      <tag>=</tag>
      <tag>person.Title.ToUpper();</tag>
      <tag>If</tag>
      <tag>the</tag>
      <tag>person</tag>
      <tag>does</tag>
      <tag>not</tag>
      <tag>have</tag>
      <tag>a</tag>
      <tag>title,</tag>
      <tag>this</tag>
      <tag>will</tag>
      <tag>throw</tag>
      <tag>an</tag>
      <tag>exception</tag>
      <tag>because</tag>
      <tag>it</tag>
      <tag>is</tag>
      <tag>trying</tag>
      <tag>to</tag>
      <tag>call</tag>
      <tag>ToUpper</tag>
      <tag>on</tag>
      <tag>a</tag>
      <tag>property</tag>
      <tag>with</tag>
      <tag>a</tag>
      <tag>null</tag>
      <tag>value.</tag>
      <tag>In</tag>
      <tag>C#</tag>
      <tag>5</tag>
      <tag>and</tag>
      <tag>below,</tag>
      <tag>this</tag>
      <tag>can</tag>
      <tag>be</tag>
      <tag>guarded</tag>
      <tag>with:</tag>
      <tag>var</tag>
      <tag>title</tag>
      <tag>=</tag>
      <tag>person.Title</tag>
      <tag>==</tag>
      <tag>null</tag>
      <tag>?</tag>
      <tag>null</tag>
      <tag>:</tag>
      <tag>person.Title.ToUpper();</tag>
      <tag>Now</tag>
      <tag>the</tag>
      <tag>title</tag>
      <tag>variable</tag>
      <tag>will</tag>
      <tag>be</tag>
      <tag>null</tag>
      <tag>instead</tag>
      <tag>of</tag>
      <tag>throwing</tag>
      <tag>an</tag>
      <tag>exception.</tag>
      <tag>C#</tag>
      <tag>6</tag>
      <tag>introduces</tag>
      <tag>a</tag>
      <tag>shorter</tag>
      <tag>syntax</tag>
      <tag>for</tag>
      <tag>this:</tag>
      <tag>var</tag>
      <tag>title</tag>
      <tag>=</tag>
      <tag>person.Title?.ToUpper();</tag>
      <tag>This</tag>
      <tag>will</tag>
      <tag>result</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>title</tag>
      <tag>variable</tag>
      <tag>being</tag>
      <tag>null,</tag>
      <tag>and</tag>
      <tag>the</tag>
      <tag>call</tag>
      <tag>to</tag>
      <tag>ToUpper</tag>
      <tag>is</tag>
      <tag>not</tag>
      <tag>made</tag>
      <tag>if</tag>
      <tag>person.Title</tag>
      <tag>is</tag>
      <tag>null.</tag>
      <tag>Wha</tag>
      <tag>Wh</tag>
      <tag>NullReferenceException</tag>
      <tag>NullReferenceExceptio</tag>
      <tag>NullReferenceExcepti</tag>
      <tag>NullReferenceExcept</tag>
      <tag>NullReferenceExcep</tag>
      <tag>NullReferenceExce</tag>
      <tag>NullReferenceExc</tag>
      <tag>NullReferenceEx</tag>
      <tag>NullReferenceE</tag>
      <tag>NullReference</tag>
      <tag>NullReferenc</tag>
      <tag>NullReferen</tag>
      <tag>NullRefere</tag>
      <tag>NullRefer</tag>
      <tag>NullRefe</tag>
      <tag>NullRef</tag>
      <tag>NullRe</tag>
      <tag>NullR</tag>
      <tag>Null</tag>
      <tag>Nul</tag>
      <tag>Nu</tag>
      <tag>an</tag>
      <tag>ho</tag>
      <tag>fi</tag>
      <tag>it</tag>
      <tag>Yo</tag>
      <tag>ar</tag>
      <tag>tryin</tag>
      <tag>tryi</tag>
      <tag>try</tag>
      <tag>tr</tag>
      <tag>us</tag>
      <tag>somethin</tag>
      <tag>somethi</tag>
      <tag>someth</tag>
      <tag>somet</tag>
      <tag>some</tag>
      <tag>som</tag>
      <tag>so</tag>
      <tag>tha</tag>
      <tag>th</tag>
      <tag>nul</tag>
      <tag>nu</tag>
      <tag>(o</tag>
      <tag>Nothin</tag>
      <tag>Nothi</tag>
      <tag>Noth</tag>
      <tag>Not</tag>
      <tag>No</tag>
      <tag>VB.NET)</tag>
      <tag>VB.NET</tag>
      <tag>VB.NE</tag>
      <tag>VB.N</tag>
      <tag>VB.</tag>
      <tag>VB</tag>
      <tag>Thi</tag>
      <tag>Th</tag>
      <tag>mean</tag>
      <tag>mea</tag>
      <tag>me</tag>
      <tag>yo</tag>
      <tag>eithe</tag>
      <tag>eith</tag>
      <tag>eit</tag>
      <tag>ei</tag>
      <tag>se</tag>
      <tag>null</tag>
      <tag>neve</tag>
      <tag>nev</tag>
      <tag>ne</tag>
      <tag>anythin</tag>
      <tag>anythi</tag>
      <tag>anyth</tag>
      <tag>anyt</tag>
      <tag>any</tag>
      <tag>all</tag>
      <tag>al</tag>
      <tag>Lik</tag>
      <tag>Li</tag>
      <tag>else</tag>
      <tag>els</tag>
      <tag>el</tag>
      <tag>get</tag>
      <tag>ge</tag>
      <tag>passe</tag>
      <tag>pass</tag>
      <tag>pas</tag>
      <tag>pa</tag>
      <tag>around</tag>
      <tag>aroun</tag>
      <tag>arou</tag>
      <tag>aro</tag>
      <tag>metho</tag>
      <tag>meth</tag>
      <tag>met</tag>
      <tag>"A"</tag>
      <tag>"A</tag>
      <tag>coul</tag>
      <tag>cou</tag>
      <tag>co</tag>
      <tag>"B</tag>
      <tag>ca</tag>
      <tag>hav</tag>
      <tag>ha</tag>
      <tag>differen</tag>
      <tag>differe</tag>
      <tag>differ</tag>
      <tag>diffe</tag>
      <tag>diff</tag>
      <tag>dif</tag>
      <tag>di</tag>
      <tag>meanings</tag>
      <tag>meaning</tag>
      <tag>meanin</tag>
      <tag>meani</tag>
      <tag>Objec</tag>
      <tag>Obje</tag>
      <tag>Obj</tag>
      <tag>Ob</tag>
      <tag>variable</tag>
      <tag>variabl</tag>
      <tag>variab</tag>
      <tag>varia</tag>
      <tag>vari</tag>
      <tag>var</tag>
      <tag>va</tag>
      <tag>whic</tag>
      <tag>whi</tag>
      <tag>wh</tag>
      <tag>uninitialize</tag>
      <tag>uninitializ</tag>
      <tag>uninitiali</tag>
      <tag>uninitial</tag>
      <tag>uninitia</tag>
      <tag>uniniti</tag>
      <tag>uninit</tag>
      <tag>unini</tag>
      <tag>unin</tag>
      <tag>uni</tag>
      <tag>un</tag>
      <tag>henc</tag>
      <tag>hen</tag>
      <tag>he</tag>
      <tag>poin</tag>
      <tag>poi</tag>
      <tag>po</tag>
      <tag>nothing</tag>
      <tag>nothin</tag>
      <tag>nothi</tag>
      <tag>noth</tag>
      <tag>not</tag>
      <tag>no</tag>
      <tag>thi</tag>
      <tag>case</tag>
      <tag>cas</tag>
      <tag>acces</tag>
      <tag>acce</tag>
      <tag>acc</tag>
      <tag>ac</tag>
      <tag>propertie</tag>
      <tag>properti</tag>
      <tag>propert</tag>
      <tag>proper</tag>
      <tag>prope</tag>
      <tag>prop</tag>
      <tag>pro</tag>
      <tag>pr</tag>
      <tag>method</tag>
      <tag>suc</tag>
      <tag>su</tag>
      <tag>objects</tag>
      <tag>object</tag>
      <tag>objec</tag>
      <tag>obje</tag>
      <tag>obj</tag>
      <tag>ob</tag>
      <tag>cause</tag>
      <tag>caus</tag>
      <tag>cau</tag>
      <tag>develope</tag>
      <tag>develop</tag>
      <tag>develo</tag>
      <tag>devel</tag>
      <tag>deve</tag>
      <tag>dev</tag>
      <tag>de</tag>
      <tag>usin</tag>
      <tag>usi</tag>
      <tag>intentionall</tag>
      <tag>intentional</tag>
      <tag>intentiona</tag>
      <tag>intention</tag>
      <tag>intentio</tag>
      <tag>intenti</tag>
      <tag>intent</tag>
      <tag>inten</tag>
      <tag>inte</tag>
      <tag>int</tag>
      <tag>in</tag>
      <tag>indicat</tag>
      <tag>indica</tag>
      <tag>indic</tag>
      <tag>indi</tag>
      <tag>ind</tag>
      <tag>ther</tag>
      <tag>the</tag>
      <tag>meaningfu</tag>
      <tag>meaningf</tag>
      <tag>valu</tag>
      <tag>val</tag>
      <tag>available</tag>
      <tag>availabl</tag>
      <tag>availab</tag>
      <tag>availa</tag>
      <tag>avail</tag>
      <tag>avai</tag>
      <tag>ava</tag>
      <tag>av</tag>
      <tag>concep</tag>
      <tag>conce</tag>
      <tag>conc</tag>
      <tag>con</tag>
      <tag>nullabl</tag>
      <tag>nullab</tag>
      <tag>nulla</tag>
      <tag>datatype</tag>
      <tag>datatyp</tag>
      <tag>dataty</tag>
      <tag>datat</tag>
      <tag>data</tag>
      <tag>dat</tag>
      <tag>da</tag>
      <tag>fo</tag>
      <tag>(lik</tag>
      <tag>(li</tag>
      <tag>(l</tag>
      <tag>databas</tag>
      <tag>databa</tag>
      <tag>datab</tag>
      <tag>table</tag>
      <tag>tabl</tag>
      <tag>tab</tag>
      <tag>ta</tag>
      <tag>fields</tag>
      <tag>field</tag>
      <tag>fiel</tag>
      <tag>fie</tag>
      <tag>assig</tag>
      <tag>assi</tag>
      <tag>ass</tag>
      <tag>as</tag>
      <tag>store</tag>
      <tag>stor</tag>
      <tag>sto</tag>
      <tag>st</tag>
      <tag>exampl</tag>
      <tag>examp</tag>
      <tag>exam</tag>
      <tag>exa</tag>
      <tag>ex</tag>
      <tag>wher</tag>
      <tag>whe</tag>
      <tag>questio</tag>
      <tag>questi</tag>
      <tag>quest</tag>
      <tag>ques</tag>
      <tag>que</tag>
      <tag>qu</tag>
      <tag>mar</tag>
      <tag>ma</tag>
      <tag>indicate</tag>
      <tag>allowe</tag>
      <tag>allow</tag>
      <tag>allo</tag>
      <tag>chec</tag>
      <tag>che</tag>
      <tag>ch</tag>
      <tag>wit</tag>
      <tag>wi</tag>
      <tag>(a.HasValue</tag>
      <tag>(a.HasValu</tag>
      <tag>(a.HasVal</tag>
      <tag>(a.HasVa</tag>
      <tag>(a.HasV</tag>
      <tag>(a.Has</tag>
      <tag>(a.Ha</tag>
      <tag>(a.H</tag>
      <tag>(a.</tag>
      <tag>(a</tag>
      <tag>{...</tag>
      <tag>{..</tag>
      <tag>{.</tag>
      <tag>(a==null</tag>
      <tag>(a==nul</tag>
      <tag>(a==nu</tag>
      <tag>(a==n</tag>
      <tag>(a==</tag>
      <tag>(a=</tag>
      <tag>{...}</tag>
      <tag>Nullabl</tag>
      <tag>Nullab</tag>
      <tag>Nulla</tag>
      <tag>variables</tag>
      <tag>lik</tag>
      <tag>li</tag>
      <tag>example</tag>
      <tag>vi</tag>
      <tag>a.Valu</tag>
      <tag>a.Val</tag>
      <tag>a.Va</tag>
      <tag>a.V</tag>
      <tag>a.</tag>
      <tag>explicitly</tag>
      <tag>explicitl</tag>
      <tag>explicit</tag>
      <tag>explici</tag>
      <tag>explic</tag>
      <tag>expli</tag>
      <tag>expl</tag>
      <tag>exp</tag>
      <tag>jus</tag>
      <tag>ju</tag>
      <tag>norma</tag>
      <tag>norm</tag>
      <tag>nor</tag>
      <tag>accessin</tag>
      <tag>accessi</tag>
      <tag>access</tag>
      <tag>throw</tag>
      <tag>thro</tag>
      <tag>thr</tag>
      <tag>InvalidOperationExceptio</tag>
      <tag>InvalidOperationExcepti</tag>
      <tag>InvalidOperationExcept</tag>
      <tag>InvalidOperationExcep</tag>
      <tag>InvalidOperationExce</tag>
      <tag>InvalidOperationExc</tag>
      <tag>InvalidOperationEx</tag>
      <tag>InvalidOperationE</tag>
      <tag>InvalidOperation</tag>
      <tag>InvalidOperatio</tag>
      <tag>InvalidOperati</tag>
      <tag>InvalidOperat</tag>
      <tag>InvalidOpera</tag>
      <tag>InvalidOper</tag>
      <tag>InvalidOpe</tag>
      <tag>InvalidOp</tag>
      <tag>InvalidO</tag>
      <tag>Invalid</tag>
      <tag>Invali</tag>
      <tag>Inval</tag>
      <tag>Inva</tag>
      <tag>Inv</tag>
      <tag>In</tag>
      <tag>instea</tag>
      <tag>inste</tag>
      <tag>inst</tag>
      <tag>ins</tag>
      <tag>shoul</tag>
      <tag>shou</tag>
      <tag>sho</tag>
      <tag>sh</tag>
      <tag>beforehand</tag>
      <tag>beforehan</tag>
      <tag>beforeha</tag>
      <tag>beforeh</tag>
      <tag>before</tag>
      <tag>befor</tag>
      <tag>befo</tag>
      <tag>bef</tag>
      <tag>be</tag>
      <tag>i.e</tag>
      <tag>i.</tag>
      <tag>anothe</tag>
      <tag>anoth</tag>
      <tag>anot</tag>
      <tag>ano</tag>
      <tag>on-nullabl</tag>
      <tag>on-nullab</tag>
      <tag>on-nulla</tag>
      <tag>on-null</tag>
      <tag>on-nul</tag>
      <tag>on-nu</tag>
      <tag>on-n</tag>
      <tag>on-</tag>
      <tag>on</tag>
      <tag>assignment</tag>
      <tag>assignmen</tag>
      <tag>assignme</tag>
      <tag>assignm</tag>
      <tag>assign</tag>
      <tag>a.Value</tag>
      <tag>shorte</tag>
      <tag>short</tag>
      <tag>shor</tag>
      <tag>res</tag>
      <tag>re</tag>
      <tag>articl</tag>
      <tag>artic</tag>
      <tag>arti</tag>
      <tag>art</tag>
      <tag>goe</tag>
      <tag>go</tag>
      <tag>mor</tag>
      <tag>mo</tag>
      <tag>detai</tag>
      <tag>deta</tag>
      <tag>det</tag>
      <tag>show</tag>
      <tag>mistake</tag>
      <tag>mistak</tag>
      <tag>mista</tag>
      <tag>mist</tag>
      <tag>mis</tag>
      <tag>mi</tag>
      <tag>man</tag>
      <tag>programmer</tag>
      <tag>programme</tag>
      <tag>programm</tag>
      <tag>program</tag>
      <tag>progra</tag>
      <tag>progr</tag>
      <tag>prog</tag>
      <tag>ofte</tag>
      <tag>oft</tag>
      <tag>of</tag>
      <tag>mak</tag>
      <tag>lea</tag>
      <tag>le</tag>
      <tag>Mor</tag>
      <tag>Mo</tag>
      <tag>Specificall</tag>
      <tag>Specifical</tag>
      <tag>Specifica</tag>
      <tag>Specific</tag>
      <tag>Specifi</tag>
      <tag>Specif</tag>
      <tag>Speci</tag>
      <tag>Spec</tag>
      <tag>Spe</tag>
      <tag>Sp</tag>
      <tag>runtim</tag>
      <tag>runti</tag>
      <tag>runt</tag>
      <tag>run</tag>
      <tag>ru</tag>
      <tag>throwin</tag>
      <tag>throwi</tag>
      <tag>alway</tag>
      <tag>alwa</tag>
      <tag>alw</tag>
      <tag>sam</tag>
      <tag>sa</tag>
      <tag>thing</tag>
      <tag>thin</tag>
      <tag>reference</tag>
      <tag>referenc</tag>
      <tag>referen</tag>
      <tag>refere</tag>
      <tag>refer</tag>
      <tag>refe</tag>
      <tag>ref</tag>
      <tag>initialize</tag>
      <tag>initializ</tag>
      <tag>initiali</tag>
      <tag>initial</tag>
      <tag>initia</tag>
      <tag>initi</tag>
      <tag>init</tag>
      <tag>ini</tag>
      <tag>wa</tag>
      <tag>onc</tag>
      <tag>initialized</tag>
      <tag>bu</tag>
      <tag>longe</tag>
      <tag>long</tag>
      <tag>lon</tag>
      <tag>lo</tag>
      <tag>initialized)</tag>
      <tag>canno</tag>
      <tag>cann</tag>
      <tag>can</tag>
      <tag>member</tag>
      <tag>membe</tag>
      <tag>memb</tag>
      <tag>mem</tag>
      <tag>(suc</tag>
      <tag>(su</tag>
      <tag>(s</tag>
      <tag>methods</tag>
      <tag>throug</tag>
      <tag>throu</tag>
      <tag>simples</tag>
      <tag>simple</tag>
      <tag>simpl</tag>
      <tag>simp</tag>
      <tag>sim</tag>
      <tag>si</tag>
      <tag>strin</tag>
      <tag>stri</tag>
      <tag>str</tag>
      <tag>foo.ToUpper()</tag>
      <tag>foo.ToUpper(</tag>
      <tag>foo.ToUpper</tag>
      <tag>foo.ToUppe</tag>
      <tag>foo.ToUpp</tag>
      <tag>foo.ToUp</tag>
      <tag>foo.ToU</tag>
      <tag>foo.To</tag>
      <tag>foo.T</tag>
      <tag>foo.</tag>
      <tag>foo</tag>
      <tag>wil</tag>
      <tag>secon</tag>
      <tag>seco</tag>
      <tag>sec</tag>
      <tag>lin</tag>
      <tag>becaus</tag>
      <tag>becau</tag>
      <tag>beca</tag>
      <tag>bec</tag>
      <tag>can'</tag>
      <tag>cal</tag>
      <tag>instanc</tag>
      <tag>instan</tag>
      <tag>insta</tag>
      <tag>ToUpper(</tag>
      <tag>ToUpper</tag>
      <tag>ToUppe</tag>
      <tag>ToUpp</tag>
      <tag>ToUp</tag>
      <tag>ToU</tag>
      <tag>To</tag>
      <tag>pointin</tag>
      <tag>pointi</tag>
      <tag>point</tag>
      <tag>Debuggin</tag>
      <tag>Debuggi</tag>
      <tag>Debugg</tag>
      <tag>Debug</tag>
      <tag>Debu</tag>
      <tag>Deb</tag>
      <tag>De</tag>
      <tag>Ho</tag>
      <tag>fin</tag>
      <tag>sourc</tag>
      <tag>sour</tag>
      <tag>sou</tag>
      <tag>Apar</tag>
      <tag>Apa</tag>
      <tag>Ap</tag>
      <tag>fro</tag>
      <tag>fr</tag>
      <tag>lookin</tag>
      <tag>looki</tag>
      <tag>look</tag>
      <tag>loo</tag>
      <tag>exceptio</tag>
      <tag>excepti</tag>
      <tag>except</tag>
      <tag>excep</tag>
      <tag>exce</tag>
      <tag>exc</tag>
      <tag>itself</tag>
      <tag>itsel</tag>
      <tag>itse</tag>
      <tag>its</tag>
      <tag>exactl</tag>
      <tag>exact</tag>
      <tag>exac</tag>
      <tag>locatio</tag>
      <tag>locati</tag>
      <tag>locat</tag>
      <tag>loca</tag>
      <tag>loc</tag>
      <tag>occurs</tag>
      <tag>occur</tag>
      <tag>occu</tag>
      <tag>occ</tag>
      <tag>oc</tag>
      <tag>genera</tag>
      <tag>gener</tag>
      <tag>gene</tag>
      <tag>gen</tag>
      <tag>rule</tag>
      <tag>rul</tag>
      <tag>debuggin</tag>
      <tag>debuggi</tag>
      <tag>debugg</tag>
      <tag>debug</tag>
      <tag>debu</tag>
      <tag>deb</tag>
      <tag>Visua</tag>
      <tag>Visu</tag>
      <tag>Vis</tag>
      <tag>Vi</tag>
      <tag>Studi</tag>
      <tag>Stud</tag>
      <tag>Stu</tag>
      <tag>St</tag>
      <tag>apply</tag>
      <tag>appl</tag>
      <tag>app</tag>
      <tag>ap</tag>
      <tag>plac</tag>
      <tag>pla</tag>
      <tag>pl</tag>
      <tag>strategi</tag>
      <tag>strateg</tag>
      <tag>strate</tag>
      <tag>strat</tag>
      <tag>stra</tag>
      <tag>breakpoint</tag>
      <tag>breakpoin</tag>
      <tag>breakpoi</tag>
      <tag>breakpo</tag>
      <tag>breakp</tag>
      <tag>break</tag>
      <tag>brea</tag>
      <tag>bre</tag>
      <tag>br</tag>
      <tag>inspec</tag>
      <tag>inspe</tag>
      <tag>insp</tag>
      <tag>you</tag>
      <tag>hoverin</tag>
      <tag>hoveri</tag>
      <tag>hover</tag>
      <tag>hove</tag>
      <tag>hov</tag>
      <tag>mous</tag>
      <tag>mou</tag>
      <tag>ove</tag>
      <tag>ov</tag>
      <tag>thei</tag>
      <tag>names</tag>
      <tag>name</tag>
      <tag>nam</tag>
      <tag>na</tag>
      <tag>openin</tag>
      <tag>openi</tag>
      <tag>open</tag>
      <tag>ope</tag>
      <tag>op</tag>
      <tag>(Quick)Watc</tag>
      <tag>(Quick)Wat</tag>
      <tag>(Quick)Wa</tag>
      <tag>(Quick)W</tag>
      <tag>(Quick)</tag>
      <tag>(Quick</tag>
      <tag>(Quic</tag>
      <tag>(Qui</tag>
      <tag>(Qu</tag>
      <tag>(Q</tag>
      <tag>windo</tag>
      <tag>wind</tag>
      <tag>win</tag>
      <tag>variou</tag>
      <tag>vario</tag>
      <tag>panel</tag>
      <tag>pane</tag>
      <tag>pan</tag>
      <tag>Local</tag>
      <tag>Loca</tag>
      <tag>Loc</tag>
      <tag>Lo</tag>
      <tag>Autos</tag>
      <tag>Auto</tag>
      <tag>Aut</tag>
      <tag>Au</tag>
      <tag>wan</tag>
      <tag>ou</tag>
      <tag>isn'</tag>
      <tag>isn</tag>
      <tag>is</tag>
      <tag>set</tag>
      <tag>right-clic</tag>
      <tag>right-cli</tag>
      <tag>right-cl</tag>
      <tag>right-c</tag>
      <tag>right-</tag>
      <tag>right</tag>
      <tag>righ</tag>
      <tag>rig</tag>
      <tag>ri</tag>
      <tag>selec</tag>
      <tag>sele</tag>
      <tag>sel</tag>
      <tag>"Fin</tag>
      <tag>"Fi</tag>
      <tag>"F</tag>
      <tag>Al</tag>
      <tag>References"</tag>
      <tag>References</tag>
      <tag>Reference</tag>
      <tag>Referenc</tag>
      <tag>Referen</tag>
      <tag>Refere</tag>
      <tag>Refer</tag>
      <tag>Refe</tag>
      <tag>Ref</tag>
      <tag>Re</tag>
      <tag>ever</tag>
      <tag>eve</tag>
      <tag>ev</tag>
      <tag>foun</tag>
      <tag>fou</tag>
      <tag>debugge</tag>
      <tag>attached</tag>
      <tag>attache</tag>
      <tag>attach</tag>
      <tag>attac</tag>
      <tag>atta</tag>
      <tag>att</tag>
      <tag>at</tag>
      <tag>Ever</tag>
      <tag>Eve</tag>
      <tag>Ev</tag>
      <tag>tim</tag>
      <tag>ti</tag>
      <tag>nee</tag>
      <tag>determin</tag>
      <tag>determi</tag>
      <tag>determ</tag>
      <tag>deter</tag>
      <tag>dete</tag>
      <tag>whethe</tag>
      <tag>wheth</tag>
      <tag>whet</tag>
      <tag>expec</tag>
      <tag>expe</tag>
      <tag>non-null</tag>
      <tag>non-nul</tag>
      <tag>non-nu</tag>
      <tag>non-n</tag>
      <tag>non-</tag>
      <tag>non</tag>
      <tag>verif</tag>
      <tag>veri</tag>
      <tag>ver</tag>
      <tag>ve</tag>
      <tag>to</tag>
      <tag>followin</tag>
      <tag>followi</tag>
      <tag>follow</tag>
      <tag>follo</tag>
      <tag>foll</tag>
      <tag>fol</tag>
      <tag>flo</tag>
      <tag>fl</tag>
      <tag>way</tag>
      <tag>properl</tag>
      <tag>Example</tag>
      <tag>Exampl</tag>
      <tag>Examp</tag>
      <tag>Exam</tag>
      <tag>Exa</tag>
      <tag>Ex</tag>
      <tag>Som</tag>
      <tag>So</tag>
      <tag>commo</tag>
      <tag>comm</tag>
      <tag>com</tag>
      <tag>scenario</tag>
      <tag>scenari</tag>
      <tag>scenar</tag>
      <tag>scena</tag>
      <tag>scen</tag>
      <tag>sce</tag>
      <tag>sc</tag>
      <tag>thrown</tag>
      <tag>Generi</tag>
      <tag>Gener</tag>
      <tag>Gene</tag>
      <tag>Gen</tag>
      <tag>Ge</tag>
      <tag>ref1.ref2.ref3.membe</tag>
      <tag>ref1.ref2.ref3.memb</tag>
      <tag>ref1.ref2.ref3.mem</tag>
      <tag>ref1.ref2.ref3.me</tag>
      <tag>ref1.ref2.ref3.m</tag>
      <tag>ref1.ref2.ref3.</tag>
      <tag>ref1.ref2.ref3</tag>
      <tag>ref1.ref2.ref</tag>
      <tag>ref1.ref2.re</tag>
      <tag>ref1.ref2.r</tag>
      <tag>ref1.ref2.</tag>
      <tag>ref1.ref2</tag>
      <tag>ref1.ref</tag>
      <tag>ref1.re</tag>
      <tag>ref1.r</tag>
      <tag>ref1.</tag>
      <tag>ref1</tag>
      <tag>you'l</tag>
      <tag>you'</tag>
      <tag>solv</tag>
      <tag>sol</tag>
      <tag>problem</tag>
      <tag>proble</tag>
      <tag>probl</tag>
      <tag>prob</tag>
      <tag>rewritin</tag>
      <tag>rewriti</tag>
      <tag>rewrit</tag>
      <tag>rewri</tag>
      <tag>rewr</tag>
      <tag>rew</tag>
      <tag>expressio</tag>
      <tag>expressi</tag>
      <tag>express</tag>
      <tag>expres</tag>
      <tag>expre</tag>
      <tag>expr</tag>
      <tag>equivalent</tag>
      <tag>equivalen</tag>
      <tag>equivale</tag>
      <tag>equival</tag>
      <tag>equiva</tag>
      <tag>equiv</tag>
      <tag>equi</tag>
      <tag>equ</tag>
      <tag>eq</tag>
      <tag>r1.ref2</tag>
      <tag>r1.ref</tag>
      <tag>r1.re</tag>
      <tag>r1.r</tag>
      <tag>r1.</tag>
      <tag>r1</tag>
      <tag>r2.ref3</tag>
      <tag>r2.ref</tag>
      <tag>r2.re</tag>
      <tag>r2.r</tag>
      <tag>r2.</tag>
      <tag>r2</tag>
      <tag>r3.membe</tag>
      <tag>r3.memb</tag>
      <tag>r3.mem</tag>
      <tag>r3.me</tag>
      <tag>r3.m</tag>
      <tag>r3.</tag>
      <tag>r3</tag>
      <tag>Specifically</tag>
      <tag>HttpContext.Current.User.Identity.Name</tag>
      <tag>HttpContext.Current.User.Identity.Nam</tag>
      <tag>HttpContext.Current.User.Identity.Na</tag>
      <tag>HttpContext.Current.User.Identity.N</tag>
      <tag>HttpContext.Current.User.Identity.</tag>
      <tag>HttpContext.Current.User.Identity</tag>
      <tag>HttpContext.Current.User.Identit</tag>
      <tag>HttpContext.Current.User.Identi</tag>
      <tag>HttpContext.Current.User.Ident</tag>
      <tag>HttpContext.Current.User.Iden</tag>
      <tag>HttpContext.Current.User.Ide</tag>
      <tag>HttpContext.Current.User.Id</tag>
      <tag>HttpContext.Current.User.I</tag>
      <tag>HttpContext.Current.User.</tag>
      <tag>HttpContext.Current.User</tag>
      <tag>HttpContext.Current.Use</tag>
      <tag>HttpContext.Current.Us</tag>
      <tag>HttpContext.Current.U</tag>
      <tag>HttpContext.Current.</tag>
      <tag>HttpContext.Current</tag>
      <tag>HttpContext.Curren</tag>
      <tag>HttpContext.Curre</tag>
      <tag>HttpContext.Curr</tag>
      <tag>HttpContext.Cur</tag>
      <tag>HttpContext.Cu</tag>
      <tag>HttpContext.C</tag>
      <tag>HttpContext.</tag>
      <tag>HttpContext</tag>
      <tag>HttpContex</tag>
      <tag>HttpConte</tag>
      <tag>HttpCont</tag>
      <tag>HttpCon</tag>
      <tag>HttpCo</tag>
      <tag>HttpC</tag>
      <tag>Http</tag>
      <tag>Htt</tag>
      <tag>Ht</tag>
      <tag>Use</tag>
      <tag>Us</tag>
      <tag>Identit</tag>
      <tag>Identi</tag>
      <tag>Ident</tag>
      <tag>Iden</tag>
      <tag>Ide</tag>
      <tag>Id</tag>
      <tag>Indirec</tag>
      <tag>Indire</tag>
      <tag>Indir</tag>
      <tag>Indi</tag>
      <tag>Ind</tag>
      <tag>publi</tag>
      <tag>publ</tag>
      <tag>pub</tag>
      <tag>pu</tag>
      <tag>clas</tag>
      <tag>cla</tag>
      <tag>cl</tag>
      <tag>Perso</tag>
      <tag>Pers</tag>
      <tag>Per</tag>
      <tag>Pe</tag>
      <tag>Ag</tag>
      <tag>Boo</tag>
      <tag>Bo</tag>
      <tag>Autho</tag>
      <tag>Auth</tag>
      <tag>voi</tag>
      <tag>vo</tag>
      <tag>Foo(</tag>
      <tag>Foo</tag>
      <tag>Fo</tag>
      <tag>Book()</tag>
      <tag>Book(</tag>
      <tag>Book</tag>
      <tag>authorAg</tag>
      <tag>authorA</tag>
      <tag>author</tag>
      <tag>autho</tag>
      <tag>auth</tag>
      <tag>aut</tag>
      <tag>au</tag>
      <tag>b1.Author.Age</tag>
      <tag>b1.Author.Ag</tag>
      <tag>b1.Author.A</tag>
      <tag>b1.Author.</tag>
      <tag>b1.Author</tag>
      <tag>b1.Autho</tag>
      <tag>b1.Auth</tag>
      <tag>b1.Aut</tag>
      <tag>b1.Au</tag>
      <tag>b1.A</tag>
      <tag>b1.</tag>
      <tag>b1</tag>
      <tag>property</tag>
      <tag>from</tag>
      <tag>avoi</tag>
      <tag>avo</tag>
      <tag>chil</tag>
      <tag>chi</tag>
      <tag>(Person</tag>
      <tag>(Perso</tag>
      <tag>(Pers</tag>
      <tag>(Per</tag>
      <tag>(Pe</tag>
      <tag>(P</tag>
      <tag>paren</tag>
      <tag>pare</tag>
      <tag>par</tag>
      <tag>(Book</tag>
      <tag>(Boo</tag>
      <tag>(Bo</tag>
      <tag>(B</tag>
      <tag>object'</tag>
      <tag>constructor</tag>
      <tag>constructo</tag>
      <tag>construct</tag>
      <tag>construc</tag>
      <tag>constru</tag>
      <tag>constr</tag>
      <tag>const</tag>
      <tag>cons</tag>
      <tag>Neste</tag>
      <tag>Nest</tag>
      <tag>Nes</tag>
      <tag>Ne</tag>
      <tag>Initializer</tag>
      <tag>Initialize</tag>
      <tag>Initializ</tag>
      <tag>Initiali</tag>
      <tag>Initial</tag>
      <tag>Initia</tag>
      <tag>Initi</tag>
      <tag>Init</tag>
      <tag>Ini</tag>
      <tag>applie</tag>
      <tag>appli</tag>
      <tag>neste</tag>
      <tag>nest</tag>
      <tag>nes</tag>
      <tag>initializers</tag>
      <tag>initializer</tag>
      <tag>translate</tag>
      <tag>translat</tag>
      <tag>transla</tag>
      <tag>transl</tag>
      <tag>trans</tag>
      <tag>tran</tag>
      <tag>tra</tag>
      <tag>45</tag>
      <tag>Whil</tag>
      <tag>Whi</tag>
      <tag>keywor</tag>
      <tag>keywo</tag>
      <tag>keyw</tag>
      <tag>key</tag>
      <tag>ke</tag>
      <tag>used</tag>
      <tag>use</tag>
      <tag>onl</tag>
      <tag>create</tag>
      <tag>creat</tag>
      <tag>crea</tag>
      <tag>cre</tag>
      <tag>cr</tag>
      <tag>Person</tag>
      <tag>stil</tag>
      <tag>sti</tag>
      <tag>Collectio</tag>
      <tag>Collecti</tag>
      <tag>Collect</tag>
      <tag>Collec</tag>
      <tag>Colle</tag>
      <tag>Coll</tag>
      <tag>Col</tag>
      <tag>Co</tag>
      <tag>ICollection&lt;Book</tag>
      <tag>ICollection&lt;Boo</tag>
      <tag>ICollection&lt;Bo</tag>
      <tag>ICollection&lt;B</tag>
      <tag>ICollection&lt;</tag>
      <tag>ICollection</tag>
      <tag>ICollectio</tag>
      <tag>ICollecti</tag>
      <tag>ICollect</tag>
      <tag>ICollec</tag>
      <tag>IColle</tag>
      <tag>IColl</tag>
      <tag>ICol</tag>
      <tag>ICo</tag>
      <tag>IC</tag>
      <tag>Titl</tag>
      <tag>Tit</tag>
      <tag>Ti</tag>
      <tag>collectio</tag>
      <tag>collecti</tag>
      <tag>collect</tag>
      <tag>collec</tag>
      <tag>colle</tag>
      <tag>coll</tag>
      <tag>col</tag>
      <tag>behav</tag>
      <tag>beha</tag>
      <tag>beh</tag>
      <tag>same</tag>
      <tag>"Title1</tag>
      <tag>"Title</tag>
      <tag>"Titl</tag>
      <tag>"Tit</tag>
      <tag>"Ti</tag>
      <tag>"T</tag>
      <tag>"Title2</tag>
      <tag>Person()</tag>
      <tag>Person(</tag>
      <tag>p1.Books.Add(ne</tag>
      <tag>p1.Books.Add(n</tag>
      <tag>p1.Books.Add(</tag>
      <tag>p1.Books.Add</tag>
      <tag>p1.Books.Ad</tag>
      <tag>p1.Books.A</tag>
      <tag>p1.Books.</tag>
      <tag>p1.Books</tag>
      <tag>p1.Book</tag>
      <tag>p1.Boo</tag>
      <tag>p1.Bo</tag>
      <tag>p1.B</tag>
      <tag>p1.</tag>
      <tag>p1</tag>
      <tag>})</tag>
      <tag>synta</tag>
      <tag>synt</tag>
      <tag>syn</tag>
      <tag>sy</tag>
      <tag>doe</tag>
      <tag>do</tag>
      <tag>p1.Books.Add(...</tag>
      <tag>p1.Books.Add(..</tag>
      <tag>p1.Books.Add(.</tag>
      <tag>statements</tag>
      <tag>statement</tag>
      <tag>statemen</tag>
      <tag>stateme</tag>
      <tag>statem</tag>
      <tag>state</tag>
      <tag>stat</tag>
      <tag>sta</tag>
      <tag>Arra</tag>
      <tag>Arr</tag>
      <tag>Ar</tag>
      <tag>int[</tag>
      <tag>number</tag>
      <tag>numbe</tag>
      <tag>numb</tag>
      <tag>num</tag>
      <tag>numbers[0]</tag>
      <tag>numbers[0</tag>
      <tag>numbers[</tag>
      <tag>numbers</tag>
      <tag>Ther</tag>
      <tag>The</tag>
      <tag>arra</tag>
      <tag>arr</tag>
      <tag>index</tag>
      <tag>inde</tag>
      <tag>Element</tag>
      <tag>Elemen</tag>
      <tag>Eleme</tag>
      <tag>Elem</tag>
      <tag>Ele</tag>
      <tag>El</tag>
      <tag>Person[</tag>
      <tag>peopl</tag>
      <tag>peop</tag>
      <tag>peo</tag>
      <tag>pe</tag>
      <tag>Person[5]</tag>
      <tag>Person[5</tag>
      <tag>people[0].Ag</tag>
      <tag>people[0].A</tag>
      <tag>people[0].</tag>
      <tag>people[0]</tag>
      <tag>people[0</tag>
      <tag>people[</tag>
      <tag>people</tag>
      <tag>allocate</tag>
      <tag>allocat</tag>
      <tag>alloca</tag>
      <tag>alloc</tag>
      <tag>for</tag>
      <tag>Jagge</tag>
      <tag>Jagg</tag>
      <tag>Jag</tag>
      <tag>Ja</tag>
      <tag>Array</tag>
      <tag>long[][</tag>
      <tag>long[]</tag>
      <tag>long[</tag>
      <tag>long[1][]</tag>
      <tag>long[1][</tag>
      <tag>long[1]</tag>
      <tag>long[1</tag>
      <tag>array[0][0</tag>
      <tag>array[0][</tag>
      <tag>array[0]</tag>
      <tag>array[0</tag>
      <tag>array[</tag>
      <tag>array</tag>
      <tag>firs</tag>
      <tag>fir</tag>
      <tag>dimensio</tag>
      <tag>dimensi</tag>
      <tag>dimens</tag>
      <tag>dimen</tag>
      <tag>dime</tag>
      <tag>dim</tag>
      <tag>ye</tag>
      <tag>long[2]</tag>
      <tag>long[2</tag>
      <tag>first</tag>
      <tag>Collection/List/Dictionar</tag>
      <tag>Collection/List/Dictiona</tag>
      <tag>Collection/List/Diction</tag>
      <tag>Collection/List/Dictio</tag>
      <tag>Collection/List/Dicti</tag>
      <tag>Collection/List/Dict</tag>
      <tag>Collection/List/Dic</tag>
      <tag>Collection/List/Di</tag>
      <tag>Collection/List/D</tag>
      <tag>Collection/List/</tag>
      <tag>Collection/List</tag>
      <tag>Collection/Lis</tag>
      <tag>Collection/Li</tag>
      <tag>Collection/L</tag>
      <tag>Collection/</tag>
      <tag>Collection</tag>
      <tag>Dictionary&lt;string</tag>
      <tag>Dictionary&lt;strin</tag>
      <tag>Dictionary&lt;stri</tag>
      <tag>Dictionary&lt;str</tag>
      <tag>Dictionary&lt;st</tag>
      <tag>Dictionary&lt;s</tag>
      <tag>Dictionary&lt;</tag>
      <tag>Dictionary</tag>
      <tag>Dictionar</tag>
      <tag>Dictiona</tag>
      <tag>Diction</tag>
      <tag>Dictio</tag>
      <tag>Dicti</tag>
      <tag>Dict</tag>
      <tag>Dic</tag>
      <tag>Di</tag>
      <tag>agesForName</tag>
      <tag>agesForNam</tag>
      <tag>agesForNa</tag>
      <tag>agesForN</tag>
      <tag>agesFor</tag>
      <tag>agesFo</tag>
      <tag>agesF</tag>
      <tag>ages</tag>
      <tag>age</tag>
      <tag>ag</tag>
      <tag>agesForNames["Bob"]</tag>
      <tag>agesForNames["Bob"</tag>
      <tag>agesForNames["Bob</tag>
      <tag>agesForNames["Bo</tag>
      <tag>agesForNames["B</tag>
      <tag>agesForNames["</tag>
      <tag>agesForNames[</tag>
      <tag>agesForNames</tag>
      <tag>perfor</tag>
      <tag>perfo</tag>
      <tag>perf</tag>
      <tag>per</tag>
      <tag>lookup</tag>
      <tag>looku</tag>
      <tag>Rang</tag>
      <tag>Ran</tag>
      <tag>Ra</tag>
      <tag>Variabl</tag>
      <tag>Variab</tag>
      <tag>Varia</tag>
      <tag>Vari</tag>
      <tag>Var</tag>
      <tag>Va</tag>
      <tag>(Indirect/Deferred</tag>
      <tag>(Indirect/Deferre</tag>
      <tag>(Indirect/Deferr</tag>
      <tag>(Indirect/Defer</tag>
      <tag>(Indirect/Defe</tag>
      <tag>(Indirect/Def</tag>
      <tag>(Indirect/De</tag>
      <tag>(Indirect/D</tag>
      <tag>(Indirect/</tag>
      <tag>(Indirect</tag>
      <tag>(Indirec</tag>
      <tag>(Indire</tag>
      <tag>(Indir</tag>
      <tag>(Indi</tag>
      <tag>(Ind</tag>
      <tag>(In</tag>
      <tag>(I</tag>
      <tag>Nam</tag>
      <tag>Na</tag>
      <tag>List&lt;Person&gt;()</tag>
      <tag>List&lt;Person&gt;(</tag>
      <tag>List&lt;Person&gt;</tag>
      <tag>List&lt;Person</tag>
      <tag>List&lt;Perso</tag>
      <tag>List&lt;Pers</tag>
      <tag>List&lt;Per</tag>
      <tag>List&lt;Pe</tag>
      <tag>List&lt;P</tag>
      <tag>List&lt;</tag>
      <tag>List</tag>
      <tag>Lis</tag>
      <tag>people.Add(null)</tag>
      <tag>people.Add(null</tag>
      <tag>people.Add(nul</tag>
      <tag>people.Add(nu</tag>
      <tag>people.Add(n</tag>
      <tag>people.Add(</tag>
      <tag>people.Add</tag>
      <tag>people.Ad</tag>
      <tag>people.A</tag>
      <tag>people.</tag>
      <tag>p.Name</tag>
      <tag>p.Nam</tag>
      <tag>p.Na</tag>
      <tag>p.N</tag>
      <tag>p.</tag>
      <tag>firstNam</tag>
      <tag>firstNa</tag>
      <tag>firstN</tag>
      <tag>names.First()</tag>
      <tag>names.First(</tag>
      <tag>names.First</tag>
      <tag>names.Firs</tag>
      <tag>names.Fir</tag>
      <tag>names.Fi</tag>
      <tag>names.F</tag>
      <tag>names.</tag>
      <tag>Exceptio</tag>
      <tag>Excepti</tag>
      <tag>Except</tag>
      <tag>Excep</tag>
      <tag>Exce</tag>
      <tag>Exc</tag>
      <tag>here</tag>
      <tag>her</tag>
      <tag>actuall</tag>
      <tag>actual</tag>
      <tag>actua</tag>
      <tag>actu</tag>
      <tag>act</tag>
      <tag>above</tag>
      <tag>abov</tag>
      <tag>abo</tag>
      <tag>ab</tag>
      <tag>"p</tag>
      <tag>elemen</tag>
      <tag>eleme</tag>
      <tag>elem</tag>
      <tag>ele</tag>
      <tag>adde</tag>
      <tag>add</tag>
      <tag>ad</tag>
      <tag>lis</tag>
      <tag>Event</tag>
      <tag>Even</tag>
      <tag>Dem</tag>
      <tag>even</tag>
      <tag>EventHandle</tag>
      <tag>EventHandl</tag>
      <tag>EventHand</tag>
      <tag>EventHan</tag>
      <tag>EventHa</tag>
      <tag>EventH</tag>
      <tag>StateChanged</tag>
      <tag>StateChange</tag>
      <tag>StateChang</tag>
      <tag>StateChan</tag>
      <tag>StateCha</tag>
      <tag>StateCh</tag>
      <tag>StateC</tag>
      <tag>State</tag>
      <tag>Stat</tag>
      <tag>Sta</tag>
      <tag>protecte</tag>
      <tag>protect</tag>
      <tag>protec</tag>
      <tag>prote</tag>
      <tag>prot</tag>
      <tag>virtua</tag>
      <tag>virtu</tag>
      <tag>virt</tag>
      <tag>vir</tag>
      <tag>OnStateChanged(EventArg</tag>
      <tag>OnStateChanged(EventAr</tag>
      <tag>OnStateChanged(EventA</tag>
      <tag>OnStateChanged(Event</tag>
      <tag>OnStateChanged(Even</tag>
      <tag>OnStateChanged(Eve</tag>
      <tag>OnStateChanged(Ev</tag>
      <tag>OnStateChanged(E</tag>
      <tag>OnStateChanged(</tag>
      <tag>OnStateChanged</tag>
      <tag>OnStateChange</tag>
      <tag>OnStateChang</tag>
      <tag>OnStateChan</tag>
      <tag>OnStateCha</tag>
      <tag>OnStateCh</tag>
      <tag>OnStateC</tag>
      <tag>OnState</tag>
      <tag>OnStat</tag>
      <tag>OnSta</tag>
      <tag>OnSt</tag>
      <tag>OnS</tag>
      <tag>On</tag>
      <tag>StateChanged(this</tag>
      <tag>StateChanged(thi</tag>
      <tag>StateChanged(th</tag>
      <tag>StateChanged(t</tag>
      <tag>StateChanged(</tag>
      <tag>e)</tag>
      <tag>handler</tag>
      <tag>handle</tag>
      <tag>handl</tag>
      <tag>hand</tag>
      <tag>han</tag>
      <tag>bee</tag>
      <tag>Ba</tag>
      <tag>Namin</tag>
      <tag>Nami</tag>
      <tag>Conventions</tag>
      <tag>Convention</tag>
      <tag>Conventio</tag>
      <tag>Conventi</tag>
      <tag>Convent</tag>
      <tag>Conven</tag>
      <tag>Conve</tag>
      <tag>Conv</tag>
      <tag>Con</tag>
      <tag>differentl</tag>
      <tag>different</tag>
      <tag>locals</tag>
      <tag>local</tag>
      <tag>migh</tag>
      <tag>mig</tag>
      <tag>realize</tag>
      <tag>realiz</tag>
      <tag>reali</tag>
      <tag>real</tag>
      <tag>rea</tag>
      <tag>Form</tag>
      <tag>For</tag>
      <tag>privat</tag>
      <tag>priva</tag>
      <tag>priv</tag>
      <tag>pri</tag>
      <tag>Custome</tag>
      <tag>Custom</tag>
      <tag>Custo</tag>
      <tag>Cust</tag>
      <tag>Cus</tag>
      <tag>Cu</tag>
      <tag>customer</tag>
      <tag>custome</tag>
      <tag>custom</tag>
      <tag>custo</tag>
      <tag>cust</tag>
      <tag>cus</tag>
      <tag>cu</tag>
      <tag>Form1_Load(objec</tag>
      <tag>Form1_Load(obje</tag>
      <tag>Form1_Load(obj</tag>
      <tag>Form1_Load(ob</tag>
      <tag>Form1_Load(o</tag>
      <tag>Form1_Load(</tag>
      <tag>Form1_Load</tag>
      <tag>Form1_Loa</tag>
      <tag>Form1_Lo</tag>
      <tag>Form1_L</tag>
      <tag>Form1_</tag>
      <tag>Form1</tag>
      <tag>sender</tag>
      <tag>sende</tag>
      <tag>send</tag>
      <tag>sen</tag>
      <tag>EventArg</tag>
      <tag>EventAr</tag>
      <tag>EventA</tag>
      <tag>Customer()</tag>
      <tag>Customer(</tag>
      <tag>Customer</tag>
      <tag>customer.Nam</tag>
      <tag>customer.Na</tag>
      <tag>customer.N</tag>
      <tag>customer.</tag>
      <tag>"John"</tag>
      <tag>"John</tag>
      <tag>"Joh</tag>
      <tag>"Jo</tag>
      <tag>"J</tag>
      <tag>Button_Click(objec</tag>
      <tag>Button_Click(obje</tag>
      <tag>Button_Click(obj</tag>
      <tag>Button_Click(ob</tag>
      <tag>Button_Click(o</tag>
      <tag>Button_Click(</tag>
      <tag>Button_Click</tag>
      <tag>Button_Clic</tag>
      <tag>Button_Cli</tag>
      <tag>Button_Cl</tag>
      <tag>Button_C</tag>
      <tag>Button_</tag>
      <tag>Button</tag>
      <tag>Butto</tag>
      <tag>Butt</tag>
      <tag>But</tag>
      <tag>Bu</tag>
      <tag>MessageBox.Show(customer.Name)</tag>
      <tag>MessageBox.Show(customer.Name</tag>
      <tag>MessageBox.Show(customer.Nam</tag>
      <tag>MessageBox.Show(customer.Na</tag>
      <tag>MessageBox.Show(customer.N</tag>
      <tag>MessageBox.Show(customer.</tag>
      <tag>MessageBox.Show(customer</tag>
      <tag>MessageBox.Show(custome</tag>
      <tag>MessageBox.Show(custom</tag>
      <tag>MessageBox.Show(custo</tag>
      <tag>MessageBox.Show(cust</tag>
      <tag>MessageBox.Show(cus</tag>
      <tag>MessageBox.Show(cu</tag>
      <tag>MessageBox.Show(c</tag>
      <tag>MessageBox.Show(</tag>
      <tag>MessageBox.Show</tag>
      <tag>MessageBox.Sho</tag>
      <tag>MessageBox.Sh</tag>
      <tag>MessageBox.S</tag>
      <tag>MessageBox.</tag>
      <tag>MessageBox</tag>
      <tag>MessageBo</tag>
      <tag>MessageB</tag>
      <tag>Message</tag>
      <tag>Messag</tag>
      <tag>Messa</tag>
      <tag>Mess</tag>
      <tag>Mes</tag>
      <tag>Me</tag>
      <tag>solve</tag>
      <tag>conventio</tag>
      <tag>conventi</tag>
      <tag>convent</tag>
      <tag>conven</tag>
      <tag>conve</tag>
      <tag>conv</tag>
      <tag>prefi</tag>
      <tag>pref</tag>
      <tag>pre</tag>
      <tag>underscore</tag>
      <tag>underscor</tag>
      <tag>undersco</tag>
      <tag>undersc</tag>
      <tag>unders</tag>
      <tag>under</tag>
      <tag>unde</tag>
      <tag>und</tag>
      <tag>_customer</tag>
      <tag>_custome</tag>
      <tag>_custom</tag>
      <tag>_custo</tag>
      <tag>_cust</tag>
      <tag>_cus</tag>
      <tag>_cu</tag>
      <tag>_c</tag>
      <tag>ASP.NE</tag>
      <tag>ASP.N</tag>
      <tag>ASP.</tag>
      <tag>ASP</tag>
      <tag>AS</tag>
      <tag>Pag</tag>
      <tag>Pa</tag>
      <tag>Lif</tag>
      <tag>cycle</tag>
      <tag>cycl</tag>
      <tag>cyc</tag>
      <tag>cy</tag>
      <tag>partia</tag>
      <tag>parti</tag>
      <tag>part</tag>
      <tag>Issues_Edi</tag>
      <tag>Issues_Ed</tag>
      <tag>Issues_E</tag>
      <tag>Issues_</tag>
      <tag>Issues</tag>
      <tag>Issue</tag>
      <tag>Issu</tag>
      <tag>Iss</tag>
      <tag>Is</tag>
      <tag>System.Web.UI.Pag</tag>
      <tag>System.Web.UI.Pa</tag>
      <tag>System.Web.UI.P</tag>
      <tag>System.Web.UI.</tag>
      <tag>System.Web.UI</tag>
      <tag>System.Web.U</tag>
      <tag>System.Web.</tag>
      <tag>System.Web</tag>
      <tag>System.We</tag>
      <tag>System.W</tag>
      <tag>System.</tag>
      <tag>System</tag>
      <tag>Syste</tag>
      <tag>Syst</tag>
      <tag>Sys</tag>
      <tag>Sy</tag>
      <tag>TestIssu</tag>
      <tag>TestIss</tag>
      <tag>TestIs</tag>
      <tag>TestI</tag>
      <tag>Test</tag>
      <tag>Tes</tag>
      <tag>Te</tag>
      <tag>myIssue</tag>
      <tag>myIssu</tag>
      <tag>myIss</tag>
      <tag>myIs</tag>
      <tag>myI</tag>
      <tag>my</tag>
      <tag>Page_Load(objec</tag>
      <tag>Page_Load(obje</tag>
      <tag>Page_Load(obj</tag>
      <tag>Page_Load(ob</tag>
      <tag>Page_Load(o</tag>
      <tag>Page_Load(</tag>
      <tag>Page_Load</tag>
      <tag>Page_Loa</tag>
      <tag>Page_Lo</tag>
      <tag>Page_L</tag>
      <tag>Page_</tag>
      <tag>Page</tag>
      <tag>(!IsPostBack</tag>
      <tag>(!IsPostBac</tag>
      <tag>(!IsPostBa</tag>
      <tag>(!IsPostB</tag>
      <tag>(!IsPost</tag>
      <tag>(!IsPos</tag>
      <tag>(!IsPo</tag>
      <tag>(!IsP</tag>
      <tag>(!Is</tag>
      <tag>(!I</tag>
      <tag>(!</tag>
      <tag>Onl</tag>
      <tag>calle</tag>
      <tag>call</tag>
      <tag>load</tag>
      <tag>loa</tag>
      <tag>butto</tag>
      <tag>butt</tag>
      <tag>but</tag>
      <tag>clicke</tag>
      <tag>click</tag>
      <tag>clic</tag>
      <tag>cli</tag>
      <tag>TestIssue()</tag>
      <tag>TestIssue(</tag>
      <tag>TestIssue</tag>
      <tag>SaveButton_Click(objec</tag>
      <tag>SaveButton_Click(obje</tag>
      <tag>SaveButton_Click(obj</tag>
      <tag>SaveButton_Click(ob</tag>
      <tag>SaveButton_Click(o</tag>
      <tag>SaveButton_Click(</tag>
      <tag>SaveButton_Click</tag>
      <tag>SaveButton_Clic</tag>
      <tag>SaveButton_Cli</tag>
      <tag>SaveButton_Cl</tag>
      <tag>SaveButton_C</tag>
      <tag>SaveButton_</tag>
      <tag>SaveButton</tag>
      <tag>SaveButto</tag>
      <tag>SaveButt</tag>
      <tag>SaveBut</tag>
      <tag>SaveBu</tag>
      <tag>SaveB</tag>
      <tag>Save</tag>
      <tag>Sav</tag>
      <tag>Sa</tag>
      <tag>myIssue.Entr</tag>
      <tag>myIssue.Ent</tag>
      <tag>myIssue.En</tag>
      <tag>myIssue.E</tag>
      <tag>myIssue.</tag>
      <tag>"NullReferenceExceptio</tag>
      <tag>"NullReferenceExcepti</tag>
      <tag>"NullReferenceExcept</tag>
      <tag>"NullReferenceExcep</tag>
      <tag>"NullReferenceExce</tag>
      <tag>"NullReferenceExc</tag>
      <tag>"NullReferenceEx</tag>
      <tag>"NullReferenceE</tag>
      <tag>"NullReference</tag>
      <tag>"NullReferenc</tag>
      <tag>"NullReferen</tag>
      <tag>"NullRefere</tag>
      <tag>"NullRefer</tag>
      <tag>"NullRefe</tag>
      <tag>"NullRef</tag>
      <tag>"NullRe</tag>
      <tag>"NullR</tag>
      <tag>"Null</tag>
      <tag>"Nul</tag>
      <tag>"Nu</tag>
      <tag>"N</tag>
      <tag>here!"</tag>
      <tag>here!</tag>
      <tag>Sessio</tag>
      <tag>Sessi</tag>
      <tag>Sess</tag>
      <tag>Ses</tag>
      <tag>Se</tag>
      <tag>Value</tag>
      <tag>Valu</tag>
      <tag>Val</tag>
      <tag>"FirstName</tag>
      <tag>"FirstNam</tag>
      <tag>"FirstNa</tag>
      <tag>"FirstN</tag>
      <tag>"First</tag>
      <tag>"Firs</tag>
      <tag>"Fir</tag>
      <tag>sessio</tag>
      <tag>sessi</tag>
      <tag>sess</tag>
      <tag>ses</tag>
      <tag>Session["FirstName"].ToString()</tag>
      <tag>Session["FirstName"].ToString(</tag>
      <tag>Session["FirstName"].ToString</tag>
      <tag>Session["FirstName"].ToStrin</tag>
      <tag>Session["FirstName"].ToStri</tag>
      <tag>Session["FirstName"].ToStr</tag>
      <tag>Session["FirstName"].ToSt</tag>
      <tag>Session["FirstName"].ToS</tag>
      <tag>Session["FirstName"].To</tag>
      <tag>Session["FirstName"].T</tag>
      <tag>Session["FirstName"].</tag>
      <tag>Session["FirstName"]</tag>
      <tag>Session["FirstName"</tag>
      <tag>Session["FirstName</tag>
      <tag>Session["FirstNam</tag>
      <tag>Session["FirstNa</tag>
      <tag>Session["FirstN</tag>
      <tag>Session["First</tag>
      <tag>Session["Firs</tag>
      <tag>Session["Fir</tag>
      <tag>Session["Fi</tag>
      <tag>Session["F</tag>
      <tag>Session["</tag>
      <tag>Session[</tag>
      <tag>Session</tag>
      <tag>MV</tag>
      <tag>empt</tag>
      <tag>emp</tag>
      <tag>em</tag>
      <tag>vie</tag>
      <tag>model</tag>
      <tag>mode</tag>
      <tag>mod</tag>
      <tag>referencin</tag>
      <tag>referenci</tag>
      <tag>@Mode</tag>
      <tag>@Mod</tag>
      <tag>@Mo</tag>
      <tag>@M</tag>
      <tag>view</tag>
      <tag>understan</tag>
      <tag>understa</tag>
      <tag>underst</tag>
      <tag>Mode</tag>
      <tag>Mod</tag>
      <tag>actio</tag>
      <tag>acti</tag>
      <tag>retur</tag>
      <tag>retu</tag>
      <tag>ret</tag>
      <tag>Whe</tag>
      <tag>controller</tag>
      <tag>controlle</tag>
      <tag>controll</tag>
      <tag>control</tag>
      <tag>contro</tag>
      <tag>contr</tag>
      <tag>cont</tag>
      <tag>Controlle</tag>
      <tag>Controll</tag>
      <tag>Control</tag>
      <tag>Contro</tag>
      <tag>Contr</tag>
      <tag>Cont</tag>
      <tag>Restaurant:Controlle</tag>
      <tag>Restaurant:Controll</tag>
      <tag>Restaurant:Control</tag>
      <tag>Restaurant:Contro</tag>
      <tag>Restaurant:Contr</tag>
      <tag>Restaurant:Cont</tag>
      <tag>Restaurant:Con</tag>
      <tag>Restaurant:Co</tag>
      <tag>Restaurant:C</tag>
      <tag>Restaurant:</tag>
      <tag>Restaurant</tag>
      <tag>Restauran</tag>
      <tag>Restaura</tag>
      <tag>Restaur</tag>
      <tag>Restau</tag>
      <tag>Resta</tag>
      <tag>Rest</tag>
      <tag>Res</tag>
      <tag>ActionResul</tag>
      <tag>ActionResu</tag>
      <tag>ActionRes</tag>
      <tag>ActionRe</tag>
      <tag>ActionR</tag>
      <tag>Action</tag>
      <tag>Actio</tag>
      <tag>Acti</tag>
      <tag>Act</tag>
      <tag>Ac</tag>
      <tag>Search(</tag>
      <tag>Search</tag>
      <tag>Searc</tag>
      <tag>Sear</tag>
      <tag>Sea</tag>
      <tag>View()</tag>
      <tag>View(</tag>
      <tag>View</tag>
      <tag>Vie</tag>
      <tag>Forgo</tag>
      <tag>Forg</tag>
      <tag>provid</tag>
      <tag>provi</tag>
      <tag>prov</tag>
      <tag>Razo</tag>
      <tag>Raz</tag>
      <tag>@foreac</tag>
      <tag>@forea</tag>
      <tag>@fore</tag>
      <tag>@for</tag>
      <tag>@fo</tag>
      <tag>@f</tag>
      <tag>(va</tag>
      <tag>(v</tag>
      <tag>restaurantSearc</tag>
      <tag>restaurantSear</tag>
      <tag>restaurantSea</tag>
      <tag>restaurantSe</tag>
      <tag>restaurantS</tag>
      <tag>restaurant</tag>
      <tag>restauran</tag>
      <tag>restaura</tag>
      <tag>restaur</tag>
      <tag>restau</tag>
      <tag>resta</tag>
      <tag>rest</tag>
      <tag>Model.RestaurantSearch</tag>
      <tag>Model.RestaurantSearc</tag>
      <tag>Model.RestaurantSear</tag>
      <tag>Model.RestaurantSea</tag>
      <tag>Model.RestaurantSe</tag>
      <tag>Model.RestaurantS</tag>
      <tag>Model.Restaurant</tag>
      <tag>Model.Restauran</tag>
      <tag>Model.Restaura</tag>
      <tag>Model.Restaur</tag>
      <tag>Model.Restau</tag>
      <tag>Model.Resta</tag>
      <tag>Model.Rest</tag>
      <tag>Model.Res</tag>
      <tag>Model.Re</tag>
      <tag>Model.R</tag>
      <tag>Model.</tag>
      <tag>Model</tag>
      <tag>Throws</tag>
      <tag>Throw</tag>
      <tag>Thro</tag>
      <tag>Thr</tag>
      <tag>&lt;p&gt;@Model.somePropertyName&lt;/p</tag>
      <tag>&lt;p&gt;@Model.somePropertyName&lt;/</tag>
      <tag>&lt;p&gt;@Model.somePropertyName&lt;</tag>
      <tag>&lt;p&gt;@Model.somePropertyName</tag>
      <tag>&lt;p&gt;@Model.somePropertyNam</tag>
      <tag>&lt;p&gt;@Model.somePropertyNa</tag>
      <tag>&lt;p&gt;@Model.somePropertyN</tag>
      <tag>&lt;p&gt;@Model.someProperty</tag>
      <tag>&lt;p&gt;@Model.somePropert</tag>
      <tag>&lt;p&gt;@Model.someProper</tag>
      <tag>&lt;p&gt;@Model.somePrope</tag>
      <tag>&lt;p&gt;@Model.someProp</tag>
      <tag>&lt;p&gt;@Model.somePro</tag>
      <tag>&lt;p&gt;@Model.somePr</tag>
      <tag>&lt;p&gt;@Model.someP</tag>
      <tag>&lt;p&gt;@Model.some</tag>
      <tag>&lt;p&gt;@Model.som</tag>
      <tag>&lt;p&gt;@Model.so</tag>
      <tag>&lt;p&gt;@Model.s</tag>
      <tag>&lt;p&gt;@Model.</tag>
      <tag>&lt;p&gt;@Model</tag>
      <tag>&lt;p&gt;@Mode</tag>
      <tag>&lt;p&gt;@Mod</tag>
      <tag>&lt;p&gt;@Mo</tag>
      <tag>&lt;p&gt;@M</tag>
      <tag>&lt;p&gt;@</tag>
      <tag>&lt;p&gt;</tag>
      <tag>&lt;p</tag>
      <tag>&lt;!-</tag>
      <tag>&lt;!</tag>
      <tag>Als</tag>
      <tag>--</tag>
      <tag>WP</tag>
      <tag>Creatio</tag>
      <tag>Creati</tag>
      <tag>Creat</tag>
      <tag>Crea</tag>
      <tag>Cre</tag>
      <tag>Cr</tag>
      <tag>Orde</tag>
      <tag>Ord</tag>
      <tag>Or</tag>
      <tag>durin</tag>
      <tag>duri</tag>
      <tag>dur</tag>
      <tag>du</tag>
      <tag>InitializeComponen</tag>
      <tag>InitializeCompone</tag>
      <tag>InitializeCompon</tag>
      <tag>InitializeCompo</tag>
      <tag>InitializeComp</tag>
      <tag>InitializeCom</tag>
      <tag>InitializeCo</tag>
      <tag>InitializeC</tag>
      <tag>orde</tag>
      <tag>ord</tag>
      <tag>or</tag>
      <tag>appea</tag>
      <tag>appe</tag>
      <tag>visua</tag>
      <tag>visu</tag>
      <tag>vis</tag>
      <tag>tree</tag>
      <tag>tre</tag>
      <tag>raise</tag>
      <tag>rais</tag>
      <tag>rai</tag>
      <tag>ra</tag>
      <tag>early-create</tag>
      <tag>early-creat</tag>
      <tag>early-crea</tag>
      <tag>early-cre</tag>
      <tag>early-cr</tag>
      <tag>early-c</tag>
      <tag>early-</tag>
      <tag>early</tag>
      <tag>earl</tag>
      <tag>ear</tag>
      <tag>ea</tag>
      <tag>handlers</tag>
      <tag>etc</tag>
      <tag>et</tag>
      <tag>late-create</tag>
      <tag>late-creat</tag>
      <tag>late-crea</tag>
      <tag>late-cre</tag>
      <tag>late-cr</tag>
      <tag>late-c</tag>
      <tag>late-</tag>
      <tag>late</tag>
      <tag>lat</tag>
      <tag>la</tag>
      <tag>controls</tag>
      <tag>&lt;Grid</tag>
      <tag>&lt;Gri</tag>
      <tag>&lt;Gr</tag>
      <tag>&lt;G</tag>
      <tag>Combobo</tag>
      <tag>Combob</tag>
      <tag>Combo</tag>
      <tag>Comb</tag>
      <tag>Com</tag>
      <tag>declare</tag>
      <tag>declar</tag>
      <tag>decla</tag>
      <tag>decl</tag>
      <tag>dec</tag>
      <tag>&lt;ComboBo</tag>
      <tag>&lt;ComboB</tag>
      <tag>&lt;Combo</tag>
      <tag>&lt;Comb</tag>
      <tag>&lt;Com</tag>
      <tag>&lt;Co</tag>
      <tag>&lt;C</tag>
      <tag>Name="comboBox1</tag>
      <tag>Name="comboBox</tag>
      <tag>Name="comboBo</tag>
      <tag>Name="comboB</tag>
      <tag>Name="combo</tag>
      <tag>Name="comb</tag>
      <tag>Name="com</tag>
      <tag>Name="co</tag>
      <tag>Name="c</tag>
      <tag>Name="</tag>
      <tag>Name=</tag>
      <tag>Name</tag>
      <tag>Margin="10</tag>
      <tag>Margin="1</tag>
      <tag>Margin="</tag>
      <tag>Margin=</tag>
      <tag>Margin</tag>
      <tag>Margi</tag>
      <tag>Marg</tag>
      <tag>Mar</tag>
      <tag>Ma</tag>
      <tag>SelectedIndex="0</tag>
      <tag>SelectedIndex="</tag>
      <tag>SelectedIndex=</tag>
      <tag>SelectedIndex</tag>
      <tag>SelectedInde</tag>
      <tag>SelectedInd</tag>
      <tag>SelectedIn</tag>
      <tag>SelectedI</tag>
      <tag>Selected</tag>
      <tag>Selecte</tag>
      <tag>Select</tag>
      <tag>Selec</tag>
      <tag>Sele</tag>
      <tag>Sel</tag>
      <tag>SelectionChanged="comboBox1_SelectionChanged"</tag>
      <tag>SelectionChanged="comboBox1_SelectionChanged</tag>
      <tag>SelectionChanged="comboBox1_SelectionChange</tag>
      <tag>SelectionChanged="comboBox1_SelectionChang</tag>
      <tag>SelectionChanged="comboBox1_SelectionChan</tag>
      <tag>SelectionChanged="comboBox1_SelectionCha</tag>
      <tag>SelectionChanged="comboBox1_SelectionCh</tag>
      <tag>SelectionChanged="comboBox1_SelectionC</tag>
      <tag>SelectionChanged="comboBox1_Selection</tag>
      <tag>SelectionChanged="comboBox1_Selectio</tag>
      <tag>SelectionChanged="comboBox1_Selecti</tag>
      <tag>SelectionChanged="comboBox1_Select</tag>
      <tag>SelectionChanged="comboBox1_Selec</tag>
      <tag>SelectionChanged="comboBox1_Sele</tag>
      <tag>SelectionChanged="comboBox1_Sel</tag>
      <tag>SelectionChanged="comboBox1_Se</tag>
      <tag>SelectionChanged="comboBox1_S</tag>
      <tag>SelectionChanged="comboBox1_</tag>
      <tag>SelectionChanged="comboBox1</tag>
      <tag>SelectionChanged="comboBox</tag>
      <tag>SelectionChanged="comboBo</tag>
      <tag>SelectionChanged="comboB</tag>
      <tag>SelectionChanged="combo</tag>
      <tag>SelectionChanged="comb</tag>
      <tag>SelectionChanged="com</tag>
      <tag>SelectionChanged="co</tag>
      <tag>SelectionChanged="c</tag>
      <tag>SelectionChanged="</tag>
      <tag>SelectionChanged=</tag>
      <tag>SelectionChanged</tag>
      <tag>SelectionChange</tag>
      <tag>SelectionChang</tag>
      <tag>SelectionChan</tag>
      <tag>SelectionCha</tag>
      <tag>SelectionCh</tag>
      <tag>SelectionC</tag>
      <tag>Selection</tag>
      <tag>Selectio</tag>
      <tag>Selecti</tag>
      <tag>&lt;ComboBoxIte</tag>
      <tag>&lt;ComboBoxIt</tag>
      <tag>&lt;ComboBoxI</tag>
      <tag>&lt;ComboBox</tag>
      <tag>Content="Ite</tag>
      <tag>Content="It</tag>
      <tag>Content="I</tag>
      <tag>Content="</tag>
      <tag>Content=</tag>
      <tag>Content</tag>
      <tag>Conten</tag>
      <tag>Conte</tag>
      <tag>&lt;/ComboBox</tag>
      <tag>&lt;/ComboBo</tag>
      <tag>&lt;/ComboB</tag>
      <tag>&lt;/Combo</tag>
      <tag>&lt;/Comb</tag>
      <tag>&lt;/Com</tag>
      <tag>&lt;/Co</tag>
      <tag>&lt;/C</tag>
      <tag>&lt;/</tag>
      <tag>Labe</tag>
      <tag>Lab</tag>
      <tag>La</tag>
      <tag>&lt;Labe</tag>
      <tag>&lt;Lab</tag>
      <tag>&lt;La</tag>
      <tag>&lt;L</tag>
      <tag>Name="label1</tag>
      <tag>Name="label</tag>
      <tag>Name="labe</tag>
      <tag>Name="lab</tag>
      <tag>Name="la</tag>
      <tag>Name="l</tag>
      <tag>Content="Label</tag>
      <tag>Content="Labe</tag>
      <tag>Content="Lab</tag>
      <tag>Content="La</tag>
      <tag>Content="L</tag>
      <tag>&lt;/Grid</tag>
      <tag>&lt;/Gri</tag>
      <tag>&lt;/Gr</tag>
      <tag>&lt;/G</tag>
      <tag>Her</tag>
      <tag>He</tag>
      <tag>comboBox</tag>
      <tag>comboBo</tag>
      <tag>comboB</tag>
      <tag>combo</tag>
      <tag>comb</tag>
      <tag>label1</tag>
      <tag>label</tag>
      <tag>labe</tag>
      <tag>lab</tag>
      <tag>comboBox1_SelectionChange</tag>
      <tag>comboBox1_SelectionChang</tag>
      <tag>comboBox1_SelectionChan</tag>
      <tag>comboBox1_SelectionCha</tag>
      <tag>comboBox1_SelectionCh</tag>
      <tag>comboBox1_SelectionC</tag>
      <tag>comboBox1_Selection</tag>
      <tag>comboBox1_Selectio</tag>
      <tag>comboBox1_Selecti</tag>
      <tag>comboBox1_Select</tag>
      <tag>comboBox1_Selec</tag>
      <tag>comboBox1_Sele</tag>
      <tag>comboBox1_Sel</tag>
      <tag>comboBox1_Se</tag>
      <tag>comboBox1_S</tag>
      <tag>comboBox1_</tag>
      <tag>comboBox1</tag>
      <tag>attempt</tag>
      <tag>attemp</tag>
      <tag>attem</tag>
      <tag>atte</tag>
      <tag>`label1</tag>
      <tag>`label</tag>
      <tag>`labe</tag>
      <tag>`lab</tag>
      <tag>`la</tag>
      <tag>`l</tag>
      <tag>created</tag>
      <tag>comboBox1_SelectionChanged(objec</tag>
      <tag>comboBox1_SelectionChanged(obje</tag>
      <tag>comboBox1_SelectionChanged(obj</tag>
      <tag>comboBox1_SelectionChanged(ob</tag>
      <tag>comboBox1_SelectionChanged(o</tag>
      <tag>comboBox1_SelectionChanged(</tag>
      <tag>comboBox1_SelectionChanged</tag>
      <tag>SelectionChangedEventArg</tag>
      <tag>SelectionChangedEventAr</tag>
      <tag>SelectionChangedEventA</tag>
      <tag>SelectionChangedEvent</tag>
      <tag>SelectionChangedEven</tag>
      <tag>SelectionChangedEve</tag>
      <tag>SelectionChangedEv</tag>
      <tag>SelectionChangedE</tag>
      <tag>label1.Conten</tag>
      <tag>label1.Conte</tag>
      <tag>label1.Cont</tag>
      <tag>label1.Con</tag>
      <tag>label1.Co</tag>
      <tag>label1.C</tag>
      <tag>label1.</tag>
      <tag>comboBox1.SelectedIndex.ToString()</tag>
      <tag>comboBox1.SelectedIndex.ToString(</tag>
      <tag>comboBox1.SelectedIndex.ToString</tag>
      <tag>comboBox1.SelectedIndex.ToStrin</tag>
      <tag>comboBox1.SelectedIndex.ToStri</tag>
      <tag>comboBox1.SelectedIndex.ToStr</tag>
      <tag>comboBox1.SelectedIndex.ToSt</tag>
      <tag>comboBox1.SelectedIndex.ToS</tag>
      <tag>comboBox1.SelectedIndex.To</tag>
      <tag>comboBox1.SelectedIndex.T</tag>
      <tag>comboBox1.SelectedIndex.</tag>
      <tag>comboBox1.SelectedIndex</tag>
      <tag>comboBox1.SelectedInde</tag>
      <tag>comboBox1.SelectedInd</tag>
      <tag>comboBox1.SelectedIn</tag>
      <tag>comboBox1.SelectedI</tag>
      <tag>comboBox1.Selected</tag>
      <tag>comboBox1.Selecte</tag>
      <tag>comboBox1.Select</tag>
      <tag>comboBox1.Selec</tag>
      <tag>comboBox1.Sele</tag>
      <tag>comboBox1.Sel</tag>
      <tag>comboBox1.Se</tag>
      <tag>comboBox1.S</tag>
      <tag>comboBox1.</tag>
      <tag>Changin</tag>
      <tag>Changi</tag>
      <tag>Chang</tag>
      <tag>Chan</tag>
      <tag>Cha</tag>
      <tag>Ch</tag>
      <tag>declaration</tag>
      <tag>declaratio</tag>
      <tag>declarati</tag>
      <tag>declarat</tag>
      <tag>declara</tag>
      <tag>XAM</tag>
      <tag>XA</tag>
      <tag>(i.e.</tag>
      <tag>(i.e</tag>
      <tag>(i.</tag>
      <tag>(i</tag>
      <tag>listin</tag>
      <tag>listi</tag>
      <tag>list</tag>
      <tag>ignorin</tag>
      <tag>ignori</tag>
      <tag>ignor</tag>
      <tag>igno</tag>
      <tag>ign</tag>
      <tag>ig</tag>
      <tag>issue</tag>
      <tag>issu</tag>
      <tag>iss</tag>
      <tag>desig</tag>
      <tag>desi</tag>
      <tag>des</tag>
      <tag>philosophy</tag>
      <tag>philosoph</tag>
      <tag>philosop</tag>
      <tag>philoso</tag>
      <tag>philos</tag>
      <tag>philo</tag>
      <tag>phil</tag>
      <tag>phi</tag>
      <tag>ph</tag>
      <tag>woul</tag>
      <tag>wou</tag>
      <tag>wo</tag>
      <tag>leas</tag>
      <tag>resolv</tag>
      <tag>resol</tag>
      <tag>reso</tag>
      <tag>Cas</tag>
      <tag>Ca</tag>
      <tag>myThin</tag>
      <tag>myThi</tag>
      <tag>myTh</tag>
      <tag>myT</tag>
      <tag>someObjec</tag>
      <tag>someObje</tag>
      <tag>someObj</tag>
      <tag>someOb</tag>
      <tag>someO</tag>
      <tag>Thing</tag>
      <tag>Thin</tag>
      <tag>doesn'</tag>
      <tag>doesn</tag>
      <tag>does</tag>
      <tag>InvalidCastExceptio</tag>
      <tag>InvalidCastExcepti</tag>
      <tag>InvalidCastExcept</tag>
      <tag>InvalidCastExcep</tag>
      <tag>InvalidCastExce</tag>
      <tag>InvalidCastExc</tag>
      <tag>InvalidCastEx</tag>
      <tag>InvalidCastE</tag>
      <tag>InvalidCast</tag>
      <tag>InvalidCas</tag>
      <tag>InvalidCa</tag>
      <tag>InvalidC</tag>
      <tag>return</tag>
      <tag>fail</tag>
      <tag>fai</tag>
      <tag>fa</tag>
      <tag>(an</tag>
      <tag>null)</tag>
      <tag>awar</tag>
      <tag>awa</tag>
      <tag>aw</tag>
      <tag>that</tag>
      <tag>LIN</tag>
      <tag>LI</tag>
      <tag>FirstOrDefault(</tag>
      <tag>FirstOrDefault</tag>
      <tag>FirstOrDefaul</tag>
      <tag>FirstOrDefau</tag>
      <tag>FirstOrDefa</tag>
      <tag>FirstOrDef</tag>
      <tag>FirstOrDe</tag>
      <tag>FirstOrD</tag>
      <tag>FirstOr</tag>
      <tag>FirstO</tag>
      <tag>First</tag>
      <tag>Firs</tag>
      <tag>Fir</tag>
      <tag>Fi</tag>
      <tag>SingleOrDefault(</tag>
      <tag>SingleOrDefault</tag>
      <tag>SingleOrDefaul</tag>
      <tag>SingleOrDefau</tag>
      <tag>SingleOrDefa</tag>
      <tag>SingleOrDef</tag>
      <tag>SingleOrDe</tag>
      <tag>SingleOrD</tag>
      <tag>SingleOr</tag>
      <tag>SingleO</tag>
      <tag>Single</tag>
      <tag>Singl</tag>
      <tag>Sing</tag>
      <tag>Sin</tag>
      <tag>Si</tag>
      <tag>plai</tag>
      <tag>version</tag>
      <tag>versio</tag>
      <tag>versi</tag>
      <tag>vers</tag>
      <tag>First(</tag>
      <tag>Single(</tag>
      <tag>exception</tag>
      <tag>"OrDefault</tag>
      <tag>"OrDefaul</tag>
      <tag>"OrDefau</tag>
      <tag>"OrDefa</tag>
      <tag>"OrDef</tag>
      <tag>"OrDe</tag>
      <tag>"OrD</tag>
      <tag>"Or</tag>
      <tag>"O</tag>
      <tag>foreac</tag>
      <tag>forea</tag>
      <tag>fore</tag>
      <tag>iterat</tag>
      <tag>itera</tag>
      <tag>iter</tag>
      <tag>ite</tag>
      <tag>collection</tag>
      <tag>Usuall</tag>
      <tag>Usual</tag>
      <tag>Usua</tag>
      <tag>Usu</tag>
      <tag>unexpecte</tag>
      <tag>unexpect</tag>
      <tag>unexpec</tag>
      <tag>unexpe</tag>
      <tag>unexp</tag>
      <tag>unex</tag>
      <tag>une</tag>
      <tag>resul</tag>
      <tag>resu</tag>
      <tag>collections</tag>
      <tag>List&lt;int</tag>
      <tag>List&lt;in</tag>
      <tag>List&lt;i</tag>
      <tag>foreach(va</tag>
      <tag>foreach(v</tag>
      <tag>foreach(</tag>
      <tag>foreach</tag>
      <tag>realisti</tag>
      <tag>realist</tag>
      <tag>realis</tag>
      <tag>node</tag>
      <tag>nod</tag>
      <tag>XM</tag>
      <tag>document</tag>
      <tag>documen</tag>
      <tag>docume</tag>
      <tag>docum</tag>
      <tag>docu</tag>
      <tag>doc</tag>
      <tag>Wil</tag>
      <tag>Wi</tag>
      <tag>valid</tag>
      <tag>vali</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//Data")</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//Data"</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//Data</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//Dat</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//Da</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//D</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("//</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("/</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes("</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes(</tag>
      <tag>myData.MyXml.DocumentNode.SelectNodes</tag>
      <tag>myData.MyXml.DocumentNode.SelectNode</tag>
      <tag>myData.MyXml.DocumentNode.SelectNod</tag>
      <tag>myData.MyXml.DocumentNode.SelectNo</tag>
      <tag>myData.MyXml.DocumentNode.SelectN</tag>
      <tag>myData.MyXml.DocumentNode.Select</tag>
      <tag>myData.MyXml.DocumentNode.Selec</tag>
      <tag>myData.MyXml.DocumentNode.Sele</tag>
      <tag>myData.MyXml.DocumentNode.Sel</tag>
      <tag>myData.MyXml.DocumentNode.Se</tag>
      <tag>myData.MyXml.DocumentNode.S</tag>
      <tag>myData.MyXml.DocumentNode.</tag>
      <tag>myData.MyXml.DocumentNode</tag>
      <tag>myData.MyXml.DocumentNod</tag>
      <tag>myData.MyXml.DocumentNo</tag>
      <tag>myData.MyXml.DocumentN</tag>
      <tag>myData.MyXml.Document</tag>
      <tag>myData.MyXml.Documen</tag>
      <tag>myData.MyXml.Docume</tag>
      <tag>myData.MyXml.Docum</tag>
      <tag>myData.MyXml.Docu</tag>
      <tag>myData.MyXml.Doc</tag>
      <tag>myData.MyXml.Do</tag>
      <tag>myData.MyXml.D</tag>
      <tag>myData.MyXml.</tag>
      <tag>myData.MyXml</tag>
      <tag>myData.MyXm</tag>
      <tag>myData.MyX</tag>
      <tag>myData.My</tag>
      <tag>myData.M</tag>
      <tag>myData.</tag>
      <tag>myData</tag>
      <tag>myDat</tag>
      <tag>myDa</tag>
      <tag>myD</tag>
      <tag>Way</tag>
      <tag>Wa</tag>
      <tag>Avoi</tag>
      <tag>Avo</tag>
      <tag>Av</tag>
      <tag>Explicitl</tag>
      <tag>Explicit</tag>
      <tag>Explici</tag>
      <tag>Explic</tag>
      <tag>Expli</tag>
      <tag>Expl</tag>
      <tag>Exp</tag>
      <tag>values</tag>
      <tag>value</tag>
      <tag>sometime</tag>
      <tag>sometim</tag>
      <tag>someti</tag>
      <tag>bein</tag>
      <tag>bei</tag>
      <tag>members</tag>
      <tag>PrintName(Perso</tag>
      <tag>PrintName(Pers</tag>
      <tag>PrintName(Per</tag>
      <tag>PrintName(Pe</tag>
      <tag>PrintName(P</tag>
      <tag>PrintName(</tag>
      <tag>PrintName</tag>
      <tag>PrintNam</tag>
      <tag>PrintNa</tag>
      <tag>PrintN</tag>
      <tag>Print</tag>
      <tag>Prin</tag>
      <tag>Pri</tag>
      <tag>Pr</tag>
      <tag>Console.WriteLine(p.Name)</tag>
      <tag>Console.WriteLine(p.Name</tag>
      <tag>Console.WriteLine(p.Nam</tag>
      <tag>Console.WriteLine(p.Na</tag>
      <tag>Console.WriteLine(p.N</tag>
      <tag>Console.WriteLine(p.</tag>
      <tag>Console.WriteLine(p</tag>
      <tag>Console.WriteLine(</tag>
      <tag>Console.WriteLine</tag>
      <tag>Console.WriteLin</tag>
      <tag>Console.WriteLi</tag>
      <tag>Console.WriteL</tag>
      <tag>Console.Write</tag>
      <tag>Console.Writ</tag>
      <tag>Console.Wri</tag>
      <tag>Console.Wr</tag>
      <tag>Console.W</tag>
      <tag>Console.</tag>
      <tag>Console</tag>
      <tag>Consol</tag>
      <tag>Conso</tag>
      <tag>Cons</tag>
      <tag>defaul</tag>
      <tag>defau</tag>
      <tag>defa</tag>
      <tag>def</tag>
      <tag>Method</tag>
      <tag>Metho</tag>
      <tag>Meth</tag>
      <tag>Met</tag>
      <tag>sough</tag>
      <tag>soug</tag>
      <tag>found</tag>
      <tag>choos</tag>
      <tag>choo</tag>
      <tag>cho</tag>
      <tag>GetCategory(Boo</tag>
      <tag>GetCategory(Bo</tag>
      <tag>GetCategory(B</tag>
      <tag>GetCategory(</tag>
      <tag>GetCategory</tag>
      <tag>GetCategor</tag>
      <tag>GetCatego</tag>
      <tag>GetCateg</tag>
      <tag>GetCate</tag>
      <tag>GetCat</tag>
      <tag>GetCa</tag>
      <tag>GetC</tag>
      <tag>Get</tag>
      <tag>"Unknown"</tag>
      <tag>"Unknown</tag>
      <tag>"Unknow</tag>
      <tag>"Unkno</tag>
      <tag>"Unkn</tag>
      <tag>"Unk</tag>
      <tag>"Un</tag>
      <tag>"U</tag>
      <tag>b.Category</tag>
      <tag>b.Categor</tag>
      <tag>b.Catego</tag>
      <tag>b.Categ</tag>
      <tag>b.Cate</tag>
      <tag>b.Cat</tag>
      <tag>b.Ca</tag>
      <tag>b.C</tag>
      <tag>b.</tag>
      <tag>als</tag>
      <tag>catc</tag>
      <tag>cat</tag>
      <tag>callin</tag>
      <tag>calli</tag>
      <tag>code</tag>
      <tag>cod</tag>
      <tag>GetCategory(strin</tag>
      <tag>GetCategory(stri</tag>
      <tag>GetCategory(str</tag>
      <tag>GetCategory(st</tag>
      <tag>GetCategory(s</tag>
      <tag>bookTitle</tag>
      <tag>bookTitl</tag>
      <tag>bookTit</tag>
      <tag>bookTi</tag>
      <tag>bookT</tag>
      <tag>book</tag>
      <tag>boo</tag>
      <tag>bo</tag>
      <tag>library.FindBook(bookTitle)</tag>
      <tag>library.FindBook(bookTitle</tag>
      <tag>library.FindBook(bookTitl</tag>
      <tag>library.FindBook(bookTit</tag>
      <tag>library.FindBook(bookTi</tag>
      <tag>library.FindBook(bookT</tag>
      <tag>library.FindBook(book</tag>
      <tag>library.FindBook(boo</tag>
      <tag>library.FindBook(bo</tag>
      <tag>library.FindBook(b</tag>
      <tag>library.FindBook(</tag>
      <tag>library.FindBook</tag>
      <tag>library.FindBoo</tag>
      <tag>library.FindBo</tag>
      <tag>library.FindB</tag>
      <tag>library.Find</tag>
      <tag>library.Fin</tag>
      <tag>library.Fi</tag>
      <tag>library.F</tag>
      <tag>library.</tag>
      <tag>library</tag>
      <tag>librar</tag>
      <tag>libra</tag>
      <tag>libr</tag>
      <tag>lib</tag>
      <tag>(boo</tag>
      <tag>(bo</tag>
      <tag>(b</tag>
      <tag>BookNotFoundException(bookTitle)</tag>
      <tag>BookNotFoundException(bookTitle</tag>
      <tag>BookNotFoundException(bookTitl</tag>
      <tag>BookNotFoundException(bookTit</tag>
      <tag>BookNotFoundException(bookTi</tag>
      <tag>BookNotFoundException(bookT</tag>
      <tag>BookNotFoundException(book</tag>
      <tag>BookNotFoundException(boo</tag>
      <tag>BookNotFoundException(bo</tag>
      <tag>BookNotFoundException(b</tag>
      <tag>BookNotFoundException(</tag>
      <tag>BookNotFoundException</tag>
      <tag>BookNotFoundExceptio</tag>
      <tag>BookNotFoundExcepti</tag>
      <tag>BookNotFoundExcept</tag>
      <tag>BookNotFoundExcep</tag>
      <tag>BookNotFoundExce</tag>
      <tag>BookNotFoundExc</tag>
      <tag>BookNotFoundEx</tag>
      <tag>BookNotFoundE</tag>
      <tag>BookNotFound</tag>
      <tag>BookNotFoun</tag>
      <tag>BookNotFou</tag>
      <tag>BookNotFo</tag>
      <tag>BookNotF</tag>
      <tag>BookNot</tag>
      <tag>BookNo</tag>
      <tag>BookN</tag>
      <tag>You</tag>
      <tag>book.Category</tag>
      <tag>book.Categor</tag>
      <tag>book.Catego</tag>
      <tag>book.Categ</tag>
      <tag>book.Cate</tag>
      <tag>book.Cat</tag>
      <tag>book.Ca</tag>
      <tag>book.C</tag>
      <tag>book.</tag>
      <tag>Debug.Asser</tag>
      <tag>Debug.Asse</tag>
      <tag>Debug.Ass</tag>
      <tag>Debug.As</tag>
      <tag>Debug.A</tag>
      <tag>Debug.</tag>
      <tag>earlie</tag>
      <tag>earli</tag>
      <tag>kno</tag>
      <tag>kn</tag>
      <tag>developmen</tag>
      <tag>developme</tag>
      <tag>developm</tag>
      <tag>mayb</tag>
      <tag>may</tag>
      <tag>Debug.Assert(</tag>
      <tag>Debug.Assert</tag>
      <tag>soo</tag>
      <tag>possibl</tag>
      <tag>possib</tag>
      <tag>possi</tag>
      <tag>poss</tag>
      <tag>pos</tag>
      <tag>GetTitle(in</tag>
      <tag>GetTitle(i</tag>
      <tag>GetTitle(</tag>
      <tag>GetTitle</tag>
      <tag>GetTitl</tag>
      <tag>GetTit</tag>
      <tag>GetTi</tag>
      <tag>GetT</tag>
      <tag>knownBookID</tag>
      <tag>knownBookI</tag>
      <tag>knownBook</tag>
      <tag>knownBoo</tag>
      <tag>knownBo</tag>
      <tag>knownB</tag>
      <tag>known</tag>
      <tag>know</tag>
      <tag>library.GetBook(knownBookID)</tag>
      <tag>library.GetBook(knownBookID</tag>
      <tag>library.GetBook(knownBookI</tag>
      <tag>library.GetBook(knownBook</tag>
      <tag>library.GetBook(knownBoo</tag>
      <tag>library.GetBook(knownBo</tag>
      <tag>library.GetBook(knownB</tag>
      <tag>library.GetBook(known</tag>
      <tag>library.GetBook(know</tag>
      <tag>library.GetBook(kno</tag>
      <tag>library.GetBook(kn</tag>
      <tag>library.GetBook(k</tag>
      <tag>library.GetBook(</tag>
      <tag>library.GetBook</tag>
      <tag>library.GetBoo</tag>
      <tag>library.GetBo</tag>
      <tag>library.GetB</tag>
      <tag>library.Get</tag>
      <tag>library.Ge</tag>
      <tag>library.G</tag>
      <tag>nex</tag>
      <tag>en</tag>
      <tag>Debug.Assert(boo</tag>
      <tag>Debug.Assert(bo</tag>
      <tag>Debug.Assert(b</tag>
      <tag>"Librar</tag>
      <tag>"Libra</tag>
      <tag>"Libr</tag>
      <tag>"Lib</tag>
      <tag>"Li</tag>
      <tag>"L</tag>
      <tag>didn'</tag>
      <tag>didn</tag>
      <tag>did</tag>
      <tag>ID.")</tag>
      <tag>ID."</tag>
      <tag>ID.</tag>
      <tag>ID</tag>
      <tag>othe</tag>
      <tag>oth</tag>
      <tag>ot</tag>
      <tag>book.Title</tag>
      <tag>book.Titl</tag>
      <tag>book.Tit</tag>
      <tag>book.Ti</tag>
      <tag>book.T</tag>
      <tag>Thoug</tag>
      <tag>Thou</tag>
      <tag>Tho</tag>
      <tag>releas</tag>
      <tag>relea</tag>
      <tag>rele</tag>
      <tag>rel</tag>
      <tag>build</tag>
      <tag>buil</tag>
      <tag>bui</tag>
      <tag>causin</tag>
      <tag>causi</tag>
      <tag>agai</tag>
      <tag>aga</tag>
      <tag>GetValueOrDefault(</tag>
      <tag>GetValueOrDefault</tag>
      <tag>GetValueOrDefaul</tag>
      <tag>GetValueOrDefau</tag>
      <tag>GetValueOrDefa</tag>
      <tag>GetValueOrDef</tag>
      <tag>GetValueOrDe</tag>
      <tag>GetValueOrD</tag>
      <tag>GetValueOr</tag>
      <tag>GetValueO</tag>
      <tag>GetValue</tag>
      <tag>GetValu</tag>
      <tag>GetVal</tag>
      <tag>GetVa</tag>
      <tag>GetV</tag>
      <tag>type</tag>
      <tag>typ</tag>
      <tag>ty</tag>
      <tag>DateTime</tag>
      <tag>DateTim</tag>
      <tag>DateTi</tag>
      <tag>DateT</tag>
      <tag>Date</tag>
      <tag>Dat</tag>
      <tag>Da</tag>
      <tag>appointmen</tag>
      <tag>appointme</tag>
      <tag>appointm</tag>
      <tag>appoint</tag>
      <tag>appoin</tag>
      <tag>appoi</tag>
      <tag>appo</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now))</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now)</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.Now</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.No</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.N</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime.</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTime</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTim</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateTi</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(DateT</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(Date</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(Dat</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(Da</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(D</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault(</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefault</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefaul</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefau</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDefa</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDef</tag>
      <tag>Console.WriteLine(appointment.GetValueOrDe</tag>
      <tag>Console.WriteLine(appointment.GetValueOrD</tag>
      <tag>Console.WriteLine(appointment.GetValueOr</tag>
      <tag>Console.WriteLine(appointment.GetValueO</tag>
      <tag>Console.WriteLine(appointment.GetValue</tag>
      <tag>Console.WriteLine(appointment.GetValu</tag>
      <tag>Console.WriteLine(appointment.GetVal</tag>
      <tag>Console.WriteLine(appointment.GetVa</tag>
      <tag>Console.WriteLine(appointment.GetV</tag>
      <tag>Console.WriteLine(appointment.Get</tag>
      <tag>Console.WriteLine(appointment.Ge</tag>
      <tag>Console.WriteLine(appointment.G</tag>
      <tag>Console.WriteLine(appointment.</tag>
      <tag>Console.WriteLine(appointment</tag>
      <tag>Console.WriteLine(appointmen</tag>
      <tag>Console.WriteLine(appointme</tag>
      <tag>Console.WriteLine(appointm</tag>
      <tag>Console.WriteLine(appoint</tag>
      <tag>Console.WriteLine(appoin</tag>
      <tag>Console.WriteLine(appoi</tag>
      <tag>Console.WriteLine(appo</tag>
      <tag>Console.WriteLine(app</tag>
      <tag>Console.WriteLine(ap</tag>
      <tag>Console.WriteLine(a</tag>
      <tag>displa</tag>
      <tag>displ</tag>
      <tag>disp</tag>
      <tag>dis</tag>
      <tag>provide</tag>
      <tag>(DateTime.Now)</tag>
      <tag>(DateTime.Now</tag>
      <tag>(DateTime.No</tag>
      <tag>(DateTime.N</tag>
      <tag>(DateTime.</tag>
      <tag>(DateTime</tag>
      <tag>(DateTim</tag>
      <tag>(DateTi</tag>
      <tag>(DateT</tag>
      <tag>(Date</tag>
      <tag>(Dat</tag>
      <tag>(Da</tag>
      <tag>(D</tag>
      <tag>DateTime(2022</tag>
      <tag>DateTime(202</tag>
      <tag>DateTime(20</tag>
      <tag>DateTime(2</tag>
      <tag>DateTime(</tag>
      <tag>10</tag>
      <tag>20)</tag>
      <tag>20</tag>
      <tag>date</tag>
      <tag>coalescin</tag>
      <tag>coalesci</tag>
      <tag>coalesc</tag>
      <tag>coales</tag>
      <tag>coale</tag>
      <tag>coal</tag>
      <tag>coa</tag>
      <tag>operator</tag>
      <tag>operato</tag>
      <tag>operat</tag>
      <tag>opera</tag>
      <tag>oper</tag>
      <tag>[C#</tag>
      <tag>[C</tag>
      <tag>If(</tag>
      <tag>If</tag>
      <tag>[VB]</tag>
      <tag>[VB</tag>
      <tag>[V</tag>
      <tag>shorthan</tag>
      <tag>shortha</tag>
      <tag>shorth</tag>
      <tag>providin</tag>
      <tag>providi</tag>
      <tag>encountered</tag>
      <tag>encountere</tag>
      <tag>encounter</tag>
      <tag>encounte</tag>
      <tag>encount</tag>
      <tag>encoun</tag>
      <tag>encou</tag>
      <tag>enco</tag>
      <tag>enc</tag>
      <tag>IServic</tag>
      <tag>IServi</tag>
      <tag>IServ</tag>
      <tag>ISer</tag>
      <tag>ISe</tag>
      <tag>IS</tag>
      <tag>CreateService(ILogge</tag>
      <tag>CreateService(ILogg</tag>
      <tag>CreateService(ILog</tag>
      <tag>CreateService(ILo</tag>
      <tag>CreateService(IL</tag>
      <tag>CreateService(I</tag>
      <tag>CreateService(</tag>
      <tag>CreateService</tag>
      <tag>CreateServic</tag>
      <tag>CreateServi</tag>
      <tag>CreateServ</tag>
      <tag>CreateSer</tag>
      <tag>CreateSe</tag>
      <tag>CreateS</tag>
      <tag>Create</tag>
      <tag>log</tag>
      <tag>Int32</tag>
      <tag>Int3</tag>
      <tag>Int</tag>
      <tag>frobPowerLevel</tag>
      <tag>frobPowerLeve</tag>
      <tag>frobPowerLev</tag>
      <tag>frobPowerLe</tag>
      <tag>frobPowerL</tag>
      <tag>frobPower</tag>
      <tag>frobPowe</tag>
      <tag>frobPow</tag>
      <tag>frobPo</tag>
      <tag>frobP</tag>
      <tag>frob</tag>
      <tag>serviceImp</tag>
      <tag>serviceIm</tag>
      <tag>serviceI</tag>
      <tag>service</tag>
      <tag>servic</tag>
      <tag>servi</tag>
      <tag>serv</tag>
      <tag>ser</tag>
      <tag>MyService(lo</tag>
      <tag>MyService(l</tag>
      <tag>MyService(</tag>
      <tag>MyService</tag>
      <tag>MyServic</tag>
      <tag>MyServi</tag>
      <tag>MyServ</tag>
      <tag>MySer</tag>
      <tag>MySe</tag>
      <tag>MyS</tag>
      <tag>My</tag>
      <tag>NullLog.Instance)</tag>
      <tag>NullLog.Instance</tag>
      <tag>NullLog.Instanc</tag>
      <tag>NullLog.Instan</tag>
      <tag>NullLog.Insta</tag>
      <tag>NullLog.Inst</tag>
      <tag>NullLog.Ins</tag>
      <tag>NullLog.In</tag>
      <tag>NullLog.I</tag>
      <tag>NullLog.</tag>
      <tag>NullLog</tag>
      <tag>NullLo</tag>
      <tag>NullL</tag>
      <tag>"GetValueOrDefault()</tag>
      <tag>"GetValueOrDefault(</tag>
      <tag>"GetValueOrDefault</tag>
      <tag>"GetValueOrDefaul</tag>
      <tag>"GetValueOrDefau</tag>
      <tag>"GetValueOrDefa</tag>
      <tag>"GetValueOrDef</tag>
      <tag>"GetValueOrDe</tag>
      <tag>"GetValueOrD</tag>
      <tag>"GetValueOr</tag>
      <tag>"GetValueO</tag>
      <tag>"GetValue</tag>
      <tag>"GetValu</tag>
      <tag>"GetVal</tag>
      <tag>"GetVa</tag>
      <tag>"GetV</tag>
      <tag>"Get</tag>
      <tag>"Ge</tag>
      <tag>"G</tag>
      <tag>rewritte</tag>
      <tag>rewritt</tag>
      <tag>serviceImpl.FrobPowerLeve</tag>
      <tag>serviceImpl.FrobPowerLev</tag>
      <tag>serviceImpl.FrobPowerLe</tag>
      <tag>serviceImpl.FrobPowerL</tag>
      <tag>serviceImpl.FrobPower</tag>
      <tag>serviceImpl.FrobPowe</tag>
      <tag>serviceImpl.FrobPow</tag>
      <tag>serviceImpl.FrobPo</tag>
      <tag>serviceImpl.FrobP</tag>
      <tag>serviceImpl.Frob</tag>
      <tag>serviceImpl.Fro</tag>
      <tag>serviceImpl.Fr</tag>
      <tag>serviceImpl.F</tag>
      <tag>serviceImpl.</tag>
      <tag>serviceImpl</tag>
      <tag>conditio</tag>
      <tag>conditi</tag>
      <tag>condit</tag>
      <tag>condi</tag>
      <tag>cond</tag>
      <tag>?[x</tag>
      <tag>?[</tag>
      <tag>(availabl</tag>
      <tag>(availab</tag>
      <tag>(availa</tag>
      <tag>(avail</tag>
      <tag>(avai</tag>
      <tag>(ava</tag>
      <tag>(av</tag>
      <tag>14)</tag>
      <tag>14</tag>
      <tag>saf</tag>
      <tag>navigatio</tag>
      <tag>navigati</tag>
      <tag>navigat</tag>
      <tag>naviga</tag>
      <tag>navig</tag>
      <tag>navi</tag>
      <tag>nav</tag>
      <tag>Elvi</tag>
      <tag>Elv</tag>
      <tag>(afte</tag>
      <tag>(aft</tag>
      <tag>(af</tag>
      <tag>shape</tag>
      <tag>shap</tag>
      <tag>sha</tag>
      <tag>lef</tag>
      <tag>sid</tag>
      <tag>evaluated</tag>
      <tag>evaluate</tag>
      <tag>evaluat</tag>
      <tag>evalua</tag>
      <tag>evalu</tag>
      <tag>eval</tag>
      <tag>eva</tag>
      <tag>returne</tag>
      <tag>instead</tag>
      <tag>Tha</tag>
      <tag>this</tag>
      <tag>titl</tag>
      <tag>tit</tag>
      <tag>person.Title.ToUpper()</tag>
      <tag>person.Title.ToUpper(</tag>
      <tag>person.Title.ToUpper</tag>
      <tag>person.Title.ToUppe</tag>
      <tag>person.Title.ToUpp</tag>
      <tag>person.Title.ToUp</tag>
      <tag>person.Title.ToU</tag>
      <tag>person.Title.To</tag>
      <tag>person.Title.T</tag>
      <tag>person.Title.</tag>
      <tag>person.Title</tag>
      <tag>person.Titl</tag>
      <tag>person.Tit</tag>
      <tag>person.Ti</tag>
      <tag>person.T</tag>
      <tag>person.</tag>
      <tag>person</tag>
      <tag>perso</tag>
      <tag>pers</tag>
      <tag>title</tag>
      <tag>below</tag>
      <tag>belo</tag>
      <tag>bel</tag>
      <tag>guarde</tag>
      <tag>guard</tag>
      <tag>guar</tag>
      <tag>gua</tag>
      <tag>gu</tag>
      <tag>with</tag>
      <tag>introduce</tag>
      <tag>introduc</tag>
      <tag>introdu</tag>
      <tag>introd</tag>
      <tag>intro</tag>
      <tag>intr</tag>
      <tag>person.Title?.ToUpper()</tag>
      <tag>person.Title?.ToUpper(</tag>
      <tag>person.Title?.ToUpper</tag>
      <tag>person.Title?.ToUppe</tag>
      <tag>person.Title?.ToUpp</tag>
      <tag>person.Title?.ToUp</tag>
      <tag>person.Title?.ToU</tag>
      <tag>person.Title?.To</tag>
      <tag>person.Title?.T</tag>
      <tag>person.Title?.</tag>
      <tag>person.Title?</tag>
      <tag>mad</tag>
    </tags>
  </post>
  <post id="602998ec-edc1-4d08-a138-76adf6e90187" author="rivaa" lastModificationTime="2018-11-10T09:32:16.4991364Z">
    <title><![CDATA[Case insensitive 'Contains(string)']]></title>
    <description><![CDATA[To TEST if the string paragraph contains the string word 
culture.CompareInfo.IndexOf(paragraph, word, CompareOptions.IgnoreCase) >= 0
Where culture is the instance of CultureInfo describing the language that the text is written in.

This solution is transparent about the definition of case-insensitivity, which is language dependent. For example, the English language uses the characters I and i for the upper and lower case versions of the ninth letter, whereas the Turkish language uses these characters for the eleventh and twelfth letters of its 29 letter-long alphabet. The Turkish upper case version of 'i' is the unfamiliar character 'İ'.

Thus the strings tin and TIN are the same word in English, but different words in Turkish. As I understand, one means 'spirit' and the other is an onomatopoeia word. (Turks, please correct me if I'm wrong, or suggest a better example)	

To summarise, you can only answer the question 'are these two strings the same but in different cases' if you know what language the text is in. If you don't know, you'll have to take a punt. Given English's hegemony in software, you should probably resort to CultureInfo.InvariantCulture, because it'll be wrong in familiar ways.]]></description>
    <tags>
      <tag>Case</tag>
      <tag>insensitive</tag>
      <tag>'Contains(string)'</tag>
      <tag>To</tag>
      <tag>TEST</tag>
      <tag>if</tag>
      <tag>the</tag>
      <tag>string</tag>
      <tag>paragraph</tag>
      <tag>contains</tag>
      <tag>the</tag>
      <tag>string</tag>
      <tag>word</tag>
      <tag>culture.CompareInfo.IndexOf(paragraph,</tag>
      <tag>word,</tag>
      <tag>CompareOptions.IgnoreCase)</tag>
      <tag>&gt;=</tag>
      <tag>0</tag>
      <tag>Where</tag>
      <tag>culture</tag>
      <tag>is</tag>
      <tag>the</tag>
      <tag>instance</tag>
      <tag>of</tag>
      <tag>CultureInfo</tag>
      <tag>describing</tag>
      <tag>the</tag>
      <tag>language</tag>
      <tag>that</tag>
      <tag>the</tag>
      <tag>text</tag>
      <tag>is</tag>
      <tag>written</tag>
      <tag>in.</tag>
      <tag>This</tag>
      <tag>solution</tag>
      <tag>is</tag>
      <tag>transparent</tag>
      <tag>about</tag>
      <tag>the</tag>
      <tag>definition</tag>
      <tag>of</tag>
      <tag>case-insensitivity,</tag>
      <tag>which</tag>
      <tag>is</tag>
      <tag>language</tag>
      <tag>dependent.</tag>
      <tag>For</tag>
      <tag>example,</tag>
      <tag>the</tag>
      <tag>English</tag>
      <tag>language</tag>
      <tag>uses</tag>
      <tag>the</tag>
      <tag>characters</tag>
      <tag>I</tag>
      <tag>and</tag>
      <tag>i</tag>
      <tag>for</tag>
      <tag>the</tag>
      <tag>upper</tag>
      <tag>and</tag>
      <tag>lower</tag>
      <tag>case</tag>
      <tag>versions</tag>
      <tag>of</tag>
      <tag>the</tag>
      <tag>ninth</tag>
      <tag>letter,</tag>
      <tag>whereas</tag>
      <tag>the</tag>
      <tag>Turkish</tag>
      <tag>language</tag>
      <tag>uses</tag>
      <tag>these</tag>
      <tag>characters</tag>
      <tag>for</tag>
      <tag>the</tag>
      <tag>eleventh</tag>
      <tag>and</tag>
      <tag>twelfth</tag>
      <tag>letters</tag>
      <tag>of</tag>
      <tag>its</tag>
      <tag>29</tag>
      <tag>letter-long</tag>
      <tag>alphabet.</tag>
      <tag>The</tag>
      <tag>Turkish</tag>
      <tag>upper</tag>
      <tag>case</tag>
      <tag>version</tag>
      <tag>of</tag>
      <tag>'i'</tag>
      <tag>is</tag>
      <tag>the</tag>
      <tag>unfamiliar</tag>
      <tag>character</tag>
      <tag>'İ'.</tag>
      <tag>Thus</tag>
      <tag>the</tag>
      <tag>strings</tag>
      <tag>tin</tag>
      <tag>and</tag>
      <tag>TIN</tag>
      <tag>are</tag>
      <tag>the</tag>
      <tag>same</tag>
      <tag>word</tag>
      <tag>in</tag>
      <tag>English,</tag>
      <tag>but</tag>
      <tag>different</tag>
      <tag>words</tag>
      <tag>in</tag>
      <tag>Turkish.</tag>
      <tag>As</tag>
      <tag>I</tag>
      <tag>understand,</tag>
      <tag>one</tag>
      <tag>means</tag>
      <tag>'spirit'</tag>
      <tag>and</tag>
      <tag>the</tag>
      <tag>other</tag>
      <tag>is</tag>
      <tag>an</tag>
      <tag>onomatopoeia</tag>
      <tag>word.</tag>
      <tag>(Turks,</tag>
      <tag>please</tag>
      <tag>correct</tag>
      <tag>me</tag>
      <tag>if</tag>
      <tag>I'm</tag>
      <tag>wrong,</tag>
      <tag>or</tag>
      <tag>suggest</tag>
      <tag>a</tag>
      <tag>better</tag>
      <tag>example)</tag>
      <tag>To</tag>
      <tag>summarise,</tag>
      <tag>you</tag>
      <tag>can</tag>
      <tag>only</tag>
      <tag>answer</tag>
      <tag>the</tag>
      <tag>question</tag>
      <tag>'are</tag>
      <tag>these</tag>
      <tag>two</tag>
      <tag>strings</tag>
      <tag>the</tag>
      <tag>same</tag>
      <tag>but</tag>
      <tag>in</tag>
      <tag>different</tag>
      <tag>cases'</tag>
      <tag>if</tag>
      <tag>you</tag>
      <tag>know</tag>
      <tag>what</tag>
      <tag>language</tag>
      <tag>the</tag>
      <tag>text</tag>
      <tag>is</tag>
      <tag>in.</tag>
      <tag>If</tag>
      <tag>you</tag>
      <tag>don't</tag>
      <tag>know,</tag>
      <tag>you'll</tag>
      <tag>have</tag>
      <tag>to</tag>
      <tag>take</tag>
      <tag>a</tag>
      <tag>punt.</tag>
      <tag>Given</tag>
      <tag>English's</tag>
      <tag>hegemony</tag>
      <tag>in</tag>
      <tag>software,</tag>
      <tag>you</tag>
      <tag>should</tag>
      <tag>probably</tag>
      <tag>resort</tag>
      <tag>to</tag>
      <tag>CultureInfo.InvariantCulture,</tag>
      <tag>because</tag>
      <tag>it'll</tag>
      <tag>be</tag>
      <tag>wrong</tag>
      <tag>in</tag>
      <tag>familiar</tag>
      <tag>ways.</tag>
      <tag>Cas</tag>
      <tag>Ca</tag>
      <tag>insensitiv</tag>
      <tag>insensiti</tag>
      <tag>insensit</tag>
      <tag>insensi</tag>
      <tag>insens</tag>
      <tag>insen</tag>
      <tag>inse</tag>
      <tag>ins</tag>
      <tag>in</tag>
      <tag>'Contains(string)</tag>
      <tag>'Contains(string</tag>
      <tag>'Contains(strin</tag>
      <tag>'Contains(stri</tag>
      <tag>'Contains(str</tag>
      <tag>'Contains(st</tag>
      <tag>'Contains(s</tag>
      <tag>'Contains(</tag>
      <tag>'Contains</tag>
      <tag>'Contain</tag>
      <tag>'Contai</tag>
      <tag>'Conta</tag>
      <tag>'Cont</tag>
      <tag>'Con</tag>
      <tag>'Co</tag>
      <tag>'C</tag>
      <tag>TES</tag>
      <tag>TE</tag>
      <tag>th</tag>
      <tag>strin</tag>
      <tag>stri</tag>
      <tag>str</tag>
      <tag>st</tag>
      <tag>paragrap</tag>
      <tag>paragra</tag>
      <tag>paragr</tag>
      <tag>parag</tag>
      <tag>para</tag>
      <tag>par</tag>
      <tag>pa</tag>
      <tag>contain</tag>
      <tag>contai</tag>
      <tag>conta</tag>
      <tag>cont</tag>
      <tag>con</tag>
      <tag>co</tag>
      <tag>wor</tag>
      <tag>wo</tag>
      <tag>culture.CompareInfo.IndexOf(paragraph</tag>
      <tag>culture.CompareInfo.IndexOf(paragrap</tag>
      <tag>culture.CompareInfo.IndexOf(paragra</tag>
      <tag>culture.CompareInfo.IndexOf(paragr</tag>
      <tag>culture.CompareInfo.IndexOf(parag</tag>
      <tag>culture.CompareInfo.IndexOf(para</tag>
      <tag>culture.CompareInfo.IndexOf(par</tag>
      <tag>culture.CompareInfo.IndexOf(pa</tag>
      <tag>culture.CompareInfo.IndexOf(p</tag>
      <tag>culture.CompareInfo.IndexOf(</tag>
      <tag>culture.CompareInfo.IndexOf</tag>
      <tag>culture.CompareInfo.IndexO</tag>
      <tag>culture.CompareInfo.Index</tag>
      <tag>culture.CompareInfo.Inde</tag>
      <tag>culture.CompareInfo.Ind</tag>
      <tag>culture.CompareInfo.In</tag>
      <tag>culture.CompareInfo.I</tag>
      <tag>culture.CompareInfo.</tag>
      <tag>culture.CompareInfo</tag>
      <tag>culture.CompareInf</tag>
      <tag>culture.CompareIn</tag>
      <tag>culture.CompareI</tag>
      <tag>culture.Compare</tag>
      <tag>culture.Compar</tag>
      <tag>culture.Compa</tag>
      <tag>culture.Comp</tag>
      <tag>culture.Com</tag>
      <tag>culture.Co</tag>
      <tag>culture.C</tag>
      <tag>culture.</tag>
      <tag>culture</tag>
      <tag>cultur</tag>
      <tag>cultu</tag>
      <tag>cult</tag>
      <tag>cul</tag>
      <tag>cu</tag>
      <tag>word</tag>
      <tag>CompareOptions.IgnoreCase</tag>
      <tag>CompareOptions.IgnoreCas</tag>
      <tag>CompareOptions.IgnoreCa</tag>
      <tag>CompareOptions.IgnoreC</tag>
      <tag>CompareOptions.Ignore</tag>
      <tag>CompareOptions.Ignor</tag>
      <tag>CompareOptions.Igno</tag>
      <tag>CompareOptions.Ign</tag>
      <tag>CompareOptions.Ig</tag>
      <tag>CompareOptions.I</tag>
      <tag>CompareOptions.</tag>
      <tag>CompareOptions</tag>
      <tag>CompareOption</tag>
      <tag>CompareOptio</tag>
      <tag>CompareOpti</tag>
      <tag>CompareOpt</tag>
      <tag>CompareOp</tag>
      <tag>CompareO</tag>
      <tag>Compare</tag>
      <tag>Compar</tag>
      <tag>Compa</tag>
      <tag>Comp</tag>
      <tag>Com</tag>
      <tag>Co</tag>
      <tag>Wher</tag>
      <tag>Whe</tag>
      <tag>Wh</tag>
      <tag>instanc</tag>
      <tag>instan</tag>
      <tag>insta</tag>
      <tag>inst</tag>
      <tag>CultureInf</tag>
      <tag>CultureIn</tag>
      <tag>CultureI</tag>
      <tag>Culture</tag>
      <tag>Cultur</tag>
      <tag>Cultu</tag>
      <tag>Cult</tag>
      <tag>Cul</tag>
      <tag>Cu</tag>
      <tag>describin</tag>
      <tag>describi</tag>
      <tag>describ</tag>
      <tag>descri</tag>
      <tag>descr</tag>
      <tag>desc</tag>
      <tag>des</tag>
      <tag>de</tag>
      <tag>languag</tag>
      <tag>langua</tag>
      <tag>langu</tag>
      <tag>lang</tag>
      <tag>lan</tag>
      <tag>la</tag>
      <tag>tha</tag>
      <tag>tex</tag>
      <tag>te</tag>
      <tag>writte</tag>
      <tag>writt</tag>
      <tag>writ</tag>
      <tag>wri</tag>
      <tag>wr</tag>
      <tag>Thi</tag>
      <tag>Th</tag>
      <tag>solutio</tag>
      <tag>soluti</tag>
      <tag>solut</tag>
      <tag>solu</tag>
      <tag>sol</tag>
      <tag>so</tag>
      <tag>transparen</tag>
      <tag>transpare</tag>
      <tag>transpar</tag>
      <tag>transpa</tag>
      <tag>transp</tag>
      <tag>trans</tag>
      <tag>tran</tag>
      <tag>tra</tag>
      <tag>tr</tag>
      <tag>abou</tag>
      <tag>abo</tag>
      <tag>ab</tag>
      <tag>definitio</tag>
      <tag>definiti</tag>
      <tag>definit</tag>
      <tag>defini</tag>
      <tag>defin</tag>
      <tag>defi</tag>
      <tag>def</tag>
      <tag>case-insensitivity</tag>
      <tag>case-insensitivit</tag>
      <tag>case-insensitivi</tag>
      <tag>case-insensitiv</tag>
      <tag>case-insensiti</tag>
      <tag>case-insensit</tag>
      <tag>case-insensi</tag>
      <tag>case-insens</tag>
      <tag>case-insen</tag>
      <tag>case-inse</tag>
      <tag>case-ins</tag>
      <tag>case-in</tag>
      <tag>case-i</tag>
      <tag>case-</tag>
      <tag>case</tag>
      <tag>cas</tag>
      <tag>ca</tag>
      <tag>whic</tag>
      <tag>whi</tag>
      <tag>wh</tag>
      <tag>dependent</tag>
      <tag>dependen</tag>
      <tag>depende</tag>
      <tag>depend</tag>
      <tag>depen</tag>
      <tag>depe</tag>
      <tag>dep</tag>
      <tag>Fo</tag>
      <tag>example</tag>
      <tag>exampl</tag>
      <tag>examp</tag>
      <tag>exam</tag>
      <tag>exa</tag>
      <tag>ex</tag>
      <tag>Englis</tag>
      <tag>Engli</tag>
      <tag>Engl</tag>
      <tag>Eng</tag>
      <tag>En</tag>
      <tag>use</tag>
      <tag>us</tag>
      <tag>character</tag>
      <tag>characte</tag>
      <tag>charact</tag>
      <tag>charac</tag>
      <tag>chara</tag>
      <tag>char</tag>
      <tag>cha</tag>
      <tag>ch</tag>
      <tag>an</tag>
      <tag>fo</tag>
      <tag>uppe</tag>
      <tag>upp</tag>
      <tag>up</tag>
      <tag>lowe</tag>
      <tag>low</tag>
      <tag>lo</tag>
      <tag>version</tag>
      <tag>versio</tag>
      <tag>versi</tag>
      <tag>vers</tag>
      <tag>ver</tag>
      <tag>ve</tag>
      <tag>nint</tag>
      <tag>nin</tag>
      <tag>ni</tag>
      <tag>letter</tag>
      <tag>lette</tag>
      <tag>lett</tag>
      <tag>let</tag>
      <tag>le</tag>
      <tag>wherea</tag>
      <tag>where</tag>
      <tag>wher</tag>
      <tag>whe</tag>
      <tag>Turkis</tag>
      <tag>Turki</tag>
      <tag>Turk</tag>
      <tag>Tur</tag>
      <tag>Tu</tag>
      <tag>thes</tag>
      <tag>the</tag>
      <tag>elevent</tag>
      <tag>eleven</tag>
      <tag>eleve</tag>
      <tag>elev</tag>
      <tag>ele</tag>
      <tag>el</tag>
      <tag>twelft</tag>
      <tag>twelf</tag>
      <tag>twel</tag>
      <tag>twe</tag>
      <tag>tw</tag>
      <tag>it</tag>
      <tag>letter-lon</tag>
      <tag>letter-lo</tag>
      <tag>letter-l</tag>
      <tag>letter-</tag>
      <tag>alphabet</tag>
      <tag>alphabe</tag>
      <tag>alphab</tag>
      <tag>alpha</tag>
      <tag>alph</tag>
      <tag>alp</tag>
      <tag>al</tag>
      <tag>'i</tag>
      <tag>unfamilia</tag>
      <tag>unfamili</tag>
      <tag>unfamil</tag>
      <tag>unfami</tag>
      <tag>unfam</tag>
      <tag>unfa</tag>
      <tag>unf</tag>
      <tag>un</tag>
      <tag>'İ'</tag>
      <tag>'İ</tag>
      <tag>Thu</tag>
      <tag>string</tag>
      <tag>ti</tag>
      <tag>TI</tag>
      <tag>ar</tag>
      <tag>sam</tag>
      <tag>sa</tag>
      <tag>English</tag>
      <tag>bu</tag>
      <tag>differen</tag>
      <tag>differe</tag>
      <tag>differ</tag>
      <tag>diffe</tag>
      <tag>diff</tag>
      <tag>dif</tag>
      <tag>di</tag>
      <tag>Turkish</tag>
      <tag>understand</tag>
      <tag>understan</tag>
      <tag>understa</tag>
      <tag>underst</tag>
      <tag>unders</tag>
      <tag>under</tag>
      <tag>unde</tag>
      <tag>und</tag>
      <tag>on</tag>
      <tag>mean</tag>
      <tag>mea</tag>
      <tag>me</tag>
      <tag>'spirit</tag>
      <tag>'spiri</tag>
      <tag>'spir</tag>
      <tag>'spi</tag>
      <tag>'sp</tag>
      <tag>'s</tag>
      <tag>othe</tag>
      <tag>oth</tag>
      <tag>ot</tag>
      <tag>onomatopoei</tag>
      <tag>onomatopoe</tag>
      <tag>onomatopo</tag>
      <tag>onomatop</tag>
      <tag>onomato</tag>
      <tag>onomat</tag>
      <tag>onoma</tag>
      <tag>onom</tag>
      <tag>ono</tag>
      <tag>(Turks</tag>
      <tag>(Turk</tag>
      <tag>(Tur</tag>
      <tag>(Tu</tag>
      <tag>(T</tag>
      <tag>pleas</tag>
      <tag>plea</tag>
      <tag>ple</tag>
      <tag>pl</tag>
      <tag>correc</tag>
      <tag>corre</tag>
      <tag>corr</tag>
      <tag>cor</tag>
      <tag>I'</tag>
      <tag>wrong</tag>
      <tag>wron</tag>
      <tag>wro</tag>
      <tag>sugges</tag>
      <tag>sugge</tag>
      <tag>sugg</tag>
      <tag>sug</tag>
      <tag>su</tag>
      <tag>bette</tag>
      <tag>bett</tag>
      <tag>bet</tag>
      <tag>be</tag>
      <tag>summarise</tag>
      <tag>summaris</tag>
      <tag>summari</tag>
      <tag>summar</tag>
      <tag>summa</tag>
      <tag>summ</tag>
      <tag>sum</tag>
      <tag>yo</tag>
      <tag>onl</tag>
      <tag>answe</tag>
      <tag>answ</tag>
      <tag>ans</tag>
      <tag>questio</tag>
      <tag>questi</tag>
      <tag>quest</tag>
      <tag>ques</tag>
      <tag>que</tag>
      <tag>qu</tag>
      <tag>'ar</tag>
      <tag>'a</tag>
      <tag>cases</tag>
      <tag>kno</tag>
      <tag>kn</tag>
      <tag>wha</tag>
      <tag>don'</tag>
      <tag>don</tag>
      <tag>do</tag>
      <tag>know</tag>
      <tag>you'l</tag>
      <tag>you'</tag>
      <tag>you</tag>
      <tag>hav</tag>
      <tag>ha</tag>
      <tag>tak</tag>
      <tag>ta</tag>
      <tag>punt</tag>
      <tag>pun</tag>
      <tag>pu</tag>
      <tag>Give</tag>
      <tag>Giv</tag>
      <tag>Gi</tag>
      <tag>English'</tag>
      <tag>hegemon</tag>
      <tag>hegemo</tag>
      <tag>hegem</tag>
      <tag>hege</tag>
      <tag>heg</tag>
      <tag>he</tag>
      <tag>software</tag>
      <tag>softwar</tag>
      <tag>softwa</tag>
      <tag>softw</tag>
      <tag>soft</tag>
      <tag>sof</tag>
      <tag>shoul</tag>
      <tag>shou</tag>
      <tag>sho</tag>
      <tag>sh</tag>
      <tag>probabl</tag>
      <tag>probab</tag>
      <tag>proba</tag>
      <tag>prob</tag>
      <tag>pro</tag>
      <tag>pr</tag>
      <tag>resor</tag>
      <tag>reso</tag>
      <tag>res</tag>
      <tag>re</tag>
      <tag>CultureInfo.InvariantCulture</tag>
      <tag>CultureInfo.InvariantCultur</tag>
      <tag>CultureInfo.InvariantCultu</tag>
      <tag>CultureInfo.InvariantCult</tag>
      <tag>CultureInfo.InvariantCul</tag>
      <tag>CultureInfo.InvariantCu</tag>
      <tag>CultureInfo.InvariantC</tag>
      <tag>CultureInfo.Invariant</tag>
      <tag>CultureInfo.Invarian</tag>
      <tag>CultureInfo.Invaria</tag>
      <tag>CultureInfo.Invari</tag>
      <tag>CultureInfo.Invar</tag>
      <tag>CultureInfo.Inva</tag>
      <tag>CultureInfo.Inv</tag>
      <tag>CultureInfo.In</tag>
      <tag>CultureInfo.I</tag>
      <tag>CultureInfo.</tag>
      <tag>CultureInfo</tag>
      <tag>becaus</tag>
      <tag>becau</tag>
      <tag>beca</tag>
      <tag>bec</tag>
      <tag>it'l</tag>
      <tag>it'</tag>
      <tag>familia</tag>
      <tag>famili</tag>
      <tag>famil</tag>
      <tag>fami</tag>
      <tag>fam</tag>
      <tag>fa</tag>
      <tag>ways</tag>
      <tag>way</tag>
      <tag>wa</tag>
    </tags>
  </post>
  <post id="eedaf74d-a564-440e-9880-1032c5ee05c1" author="rivaa" lastModificationTime="2018-11-09T13:13:50.1272516Z">
    <title><![CDATA[What is the difference between String and string in C#?]]></title>
    <description><![CDATA[string is an alias in C# 
So technically, there is no difference. It's like int vs. System.Int32.
As far as guidelines, it's generally recommended to use string any time you're referring to an object.


string place = "world";
Likewise, I think it's generally recommended to use String if you need to refer specifically to the class.

string greet = String.Format("Hello {0}!", place);]]></description>
    <tags>
      <tag>What</tag>
      <tag>is</tag>
      <tag>the</tag>
      <tag>difference</tag>
      <tag>between</tag>
      <tag>String</tag>
      <tag>and</tag>
      <tag>string</tag>
      <tag>in</tag>
      <tag>C#?</tag>
      <tag>string</tag>
      <tag>is</tag>
      <tag>an</tag>
      <tag>alias</tag>
      <tag>in</tag>
      <tag>C#</tag>
      <tag>So</tag>
      <tag>technically,</tag>
      <tag>there</tag>
      <tag>is</tag>
      <tag>no</tag>
      <tag>difference.</tag>
      <tag>It's</tag>
      <tag>like</tag>
      <tag>int</tag>
      <tag>vs.</tag>
      <tag>System.Int32.</tag>
      <tag>As</tag>
      <tag>far</tag>
      <tag>as</tag>
      <tag>guidelines,</tag>
      <tag>it's</tag>
      <tag>generally</tag>
      <tag>recommended</tag>
      <tag>to</tag>
      <tag>use</tag>
      <tag>string</tag>
      <tag>any</tag>
      <tag>time</tag>
      <tag>you're</tag>
      <tag>referring</tag>
      <tag>to</tag>
      <tag>an</tag>
      <tag>object.</tag>
      <tag>string</tag>
      <tag>place</tag>
      <tag>=</tag>
      <tag>"world";</tag>
      <tag>Likewise,</tag>
      <tag>I</tag>
      <tag>think</tag>
      <tag>it's</tag>
      <tag>generally</tag>
      <tag>recommended</tag>
      <tag>to</tag>
      <tag>use</tag>
      <tag>String</tag>
      <tag>if</tag>
      <tag>you</tag>
      <tag>need</tag>
      <tag>to</tag>
      <tag>refer</tag>
      <tag>specifically</tag>
      <tag>to</tag>
      <tag>the</tag>
      <tag>class.</tag>
      <tag>string</tag>
      <tag>greet</tag>
      <tag>=</tag>
      <tag>String.Format("Hello</tag>
      <tag>{0}!",</tag>
      <tag>place);</tag>
      <tag>Wha</tag>
      <tag>Wh</tag>
      <tag>th</tag>
      <tag>differenc</tag>
      <tag>differen</tag>
      <tag>differe</tag>
      <tag>differ</tag>
      <tag>diffe</tag>
      <tag>diff</tag>
      <tag>dif</tag>
      <tag>di</tag>
      <tag>betwee</tag>
      <tag>betwe</tag>
      <tag>betw</tag>
      <tag>bet</tag>
      <tag>be</tag>
      <tag>Strin</tag>
      <tag>Stri</tag>
      <tag>Str</tag>
      <tag>St</tag>
      <tag>an</tag>
      <tag>strin</tag>
      <tag>stri</tag>
      <tag>str</tag>
      <tag>st</tag>
      <tag>C#</tag>
      <tag>alia</tag>
      <tag>ali</tag>
      <tag>al</tag>
      <tag>technically</tag>
      <tag>technicall</tag>
      <tag>technical</tag>
      <tag>technica</tag>
      <tag>technic</tag>
      <tag>techni</tag>
      <tag>techn</tag>
      <tag>tech</tag>
      <tag>tec</tag>
      <tag>te</tag>
      <tag>ther</tag>
      <tag>the</tag>
      <tag>difference</tag>
      <tag>It'</tag>
      <tag>It</tag>
      <tag>lik</tag>
      <tag>li</tag>
      <tag>in</tag>
      <tag>vs</tag>
      <tag>System.Int32</tag>
      <tag>System.Int3</tag>
      <tag>System.Int</tag>
      <tag>System.In</tag>
      <tag>System.I</tag>
      <tag>System.</tag>
      <tag>System</tag>
      <tag>Syste</tag>
      <tag>Syst</tag>
      <tag>Sys</tag>
      <tag>Sy</tag>
      <tag>fa</tag>
      <tag>guidelines</tag>
      <tag>guideline</tag>
      <tag>guidelin</tag>
      <tag>guideli</tag>
      <tag>guidel</tag>
      <tag>guide</tag>
      <tag>guid</tag>
      <tag>gui</tag>
      <tag>gu</tag>
      <tag>it'</tag>
      <tag>it</tag>
      <tag>generall</tag>
      <tag>general</tag>
      <tag>genera</tag>
      <tag>gener</tag>
      <tag>gene</tag>
      <tag>gen</tag>
      <tag>ge</tag>
      <tag>recommende</tag>
      <tag>recommend</tag>
      <tag>recommen</tag>
      <tag>recomme</tag>
      <tag>recomm</tag>
      <tag>recom</tag>
      <tag>reco</tag>
      <tag>rec</tag>
      <tag>re</tag>
      <tag>us</tag>
      <tag>tim</tag>
      <tag>ti</tag>
      <tag>you'r</tag>
      <tag>you'</tag>
      <tag>you</tag>
      <tag>yo</tag>
      <tag>referrin</tag>
      <tag>referri</tag>
      <tag>referr</tag>
      <tag>refer</tag>
      <tag>refe</tag>
      <tag>ref</tag>
      <tag>object</tag>
      <tag>objec</tag>
      <tag>obje</tag>
      <tag>obj</tag>
      <tag>ob</tag>
      <tag>plac</tag>
      <tag>pla</tag>
      <tag>pl</tag>
      <tag>"world"</tag>
      <tag>"world</tag>
      <tag>"worl</tag>
      <tag>"wor</tag>
      <tag>"wo</tag>
      <tag>"w</tag>
      <tag>Likewise</tag>
      <tag>Likewis</tag>
      <tag>Likewi</tag>
      <tag>Likew</tag>
      <tag>Like</tag>
      <tag>Lik</tag>
      <tag>Li</tag>
      <tag>thin</tag>
      <tag>thi</tag>
      <tag>nee</tag>
      <tag>ne</tag>
      <tag>specificall</tag>
      <tag>specifical</tag>
      <tag>specifica</tag>
      <tag>specific</tag>
      <tag>specifi</tag>
      <tag>specif</tag>
      <tag>speci</tag>
      <tag>spec</tag>
      <tag>spe</tag>
      <tag>sp</tag>
      <tag>class</tag>
      <tag>clas</tag>
      <tag>cla</tag>
      <tag>cl</tag>
      <tag>gree</tag>
      <tag>gre</tag>
      <tag>gr</tag>
      <tag>String.Format("Hell</tag>
      <tag>String.Format("Hel</tag>
      <tag>String.Format("He</tag>
      <tag>String.Format("H</tag>
      <tag>String.Format("</tag>
      <tag>String.Format(</tag>
      <tag>String.Format</tag>
      <tag>String.Forma</tag>
      <tag>String.Form</tag>
      <tag>String.For</tag>
      <tag>String.Fo</tag>
      <tag>String.F</tag>
      <tag>String.</tag>
      <tag>String</tag>
      <tag>{0}!"</tag>
      <tag>{0}!</tag>
      <tag>{0}</tag>
      <tag>{0</tag>
      <tag>place)</tag>
      <tag>place</tag>
    </tags>
  </post>
  <post id="e6f88000-51fc-45ae-b514-8703a184da98" author="rivaa" lastModificationTime="2018-11-09T13:13:38.1920315Z">
    <title><![CDATA[Controvalorizzazione FX Option]]></title>
    <description><![CDATA[Errore in controvalorizzazione Fx option nel caso in cui si censisca una divisa:
- EUR
- USD
-
-]]></description>
    <tags>
      <tag>Controvalorizzazione</tag>
      <tag>FX</tag>
      <tag>Option</tag>
      <tag>Errore</tag>
      <tag>in</tag>
      <tag>controvalorizzazione</tag>
      <tag>Fx</tag>
      <tag>option</tag>
      <tag>nel</tag>
      <tag>caso</tag>
      <tag>in</tag>
      <tag>cui</tag>
      <tag>si</tag>
      <tag>censisca</tag>
      <tag>una</tag>
      <tag>divisa:</tag>
      <tag>-</tag>
      <tag>EUR</tag>
      <tag>-</tag>
      <tag>USD</tag>
      <tag>-</tag>
      <tag>-</tag>
      <tag>Controvalorizzazion</tag>
      <tag>Controvalorizzazio</tag>
      <tag>Controvalorizzazi</tag>
      <tag>Controvalorizzaz</tag>
      <tag>Controvalorizza</tag>
      <tag>Controvalorizz</tag>
      <tag>Controvaloriz</tag>
      <tag>Controvalori</tag>
      <tag>Controvalor</tag>
      <tag>Controvalo</tag>
      <tag>Controval</tag>
      <tag>Controva</tag>
      <tag>Controv</tag>
      <tag>Contro</tag>
      <tag>Contr</tag>
      <tag>Cont</tag>
      <tag>Con</tag>
      <tag>Co</tag>
      <tag>Optio</tag>
      <tag>Opti</tag>
      <tag>Opt</tag>
      <tag>Op</tag>
      <tag>Error</tag>
      <tag>Erro</tag>
      <tag>Err</tag>
      <tag>Er</tag>
      <tag>controvalorizzazion</tag>
      <tag>controvalorizzazio</tag>
      <tag>controvalorizzazi</tag>
      <tag>controvalorizzaz</tag>
      <tag>controvalorizza</tag>
      <tag>controvalorizz</tag>
      <tag>controvaloriz</tag>
      <tag>controvalori</tag>
      <tag>controvalor</tag>
      <tag>controvalo</tag>
      <tag>controval</tag>
      <tag>controva</tag>
      <tag>controv</tag>
      <tag>contro</tag>
      <tag>contr</tag>
      <tag>cont</tag>
      <tag>con</tag>
      <tag>co</tag>
      <tag>optio</tag>
      <tag>opti</tag>
      <tag>opt</tag>
      <tag>op</tag>
      <tag>ne</tag>
      <tag>cas</tag>
      <tag>ca</tag>
      <tag>cu</tag>
      <tag>censisc</tag>
      <tag>censis</tag>
      <tag>censi</tag>
      <tag>cens</tag>
      <tag>cen</tag>
      <tag>ce</tag>
      <tag>un</tag>
      <tag>divisa</tag>
      <tag>divis</tag>
      <tag>divi</tag>
      <tag>div</tag>
      <tag>di</tag>
      <tag>EU</tag>
      <tag>US</tag>
    </tags>
  </post>
  <post id="ed85f91f-56a6-4889-a62a-bc92d9a62d9d" author="rivaa" lastModificationTime="2018-11-09T22:50:18.4859234Z">
    <title><![CDATA[Create Excel (.XLS and .XLSX) file from C#]]></title>
    <description><![CDATA[You can use a library called ExcelLibrary. It's a free, open source library posted on Google Code:
This looks to be a port of the PHP ExcelWriter that you mentioned above. It will not write to the new .xlsx format yet, but they are working on adding that functionality in.

It's very simple, small and easy to use. Plus it has a DataSetHelper that lets you use DataSets and DataTables to easily work with Excel data.

ExcelLibrary seems to still only work for the older Excel format (.xls files), but may be adding support in the future for newer 2007/2010 formats.

You can also use EPPlus, which works only for Excel 2007/2010 format files (.xlsx files).

There are a few known bugs with each library as noted in the comments. In all, EPPlus seems to be the best choice as time goes on. It seems to be more actively updated and documented as well.

Also, as noted by @АртёмЦарионов below, EPPlus has support for Pivot Tables and ExcelLibrary may have some support (Pivot table issue in ExcelLibrary)

Here are a couple links for quick reference:
ExcelLibrary - GNU Lesser GPL
EPPlus - GNU Lesser General Public License (LGPL)
]]></description>
    <tags>
      <tag>Create</tag>
      <tag>Excel</tag>
      <tag>(.XLS</tag>
      <tag>and</tag>
      <tag>.XLSX)</tag>
      <tag>file</tag>
      <tag>from</tag>
      <tag>C#</tag>
      <tag>You</tag>
      <tag>can</tag>
      <tag>use</tag>
      <tag>a</tag>
      <tag>library</tag>
      <tag>called</tag>
      <tag>ExcelLibrary.</tag>
      <tag>It's</tag>
      <tag>a</tag>
      <tag>free,</tag>
      <tag>open</tag>
      <tag>source</tag>
      <tag>library</tag>
      <tag>posted</tag>
      <tag>on</tag>
      <tag>Google</tag>
      <tag>Code:</tag>
      <tag>This</tag>
      <tag>looks</tag>
      <tag>to</tag>
      <tag>be</tag>
      <tag>a</tag>
      <tag>port</tag>
      <tag>of</tag>
      <tag>the</tag>
      <tag>PHP</tag>
      <tag>ExcelWriter</tag>
      <tag>that</tag>
      <tag>you</tag>
      <tag>mentioned</tag>
      <tag>above.</tag>
      <tag>It</tag>
      <tag>will</tag>
      <tag>not</tag>
      <tag>write</tag>
      <tag>to</tag>
      <tag>the</tag>
      <tag>new</tag>
      <tag>.xlsx</tag>
      <tag>format</tag>
      <tag>yet,</tag>
      <tag>but</tag>
      <tag>they</tag>
      <tag>are</tag>
      <tag>working</tag>
      <tag>on</tag>
      <tag>adding</tag>
      <tag>that</tag>
      <tag>functionality</tag>
      <tag>in.</tag>
      <tag>It's</tag>
      <tag>very</tag>
      <tag>simple,</tag>
      <tag>small</tag>
      <tag>and</tag>
      <tag>easy</tag>
      <tag>to</tag>
      <tag>use.</tag>
      <tag>Plus</tag>
      <tag>it</tag>
      <tag>has</tag>
      <tag>a</tag>
      <tag>DataSetHelper</tag>
      <tag>that</tag>
      <tag>lets</tag>
      <tag>you</tag>
      <tag>use</tag>
      <tag>DataSets</tag>
      <tag>and</tag>
      <tag>DataTables</tag>
      <tag>to</tag>
      <tag>easily</tag>
      <tag>work</tag>
      <tag>with</tag>
      <tag>Excel</tag>
      <tag>data.</tag>
      <tag>ExcelLibrary</tag>
      <tag>seems</tag>
      <tag>to</tag>
      <tag>still</tag>
      <tag>only</tag>
      <tag>work</tag>
      <tag>for</tag>
      <tag>the</tag>
      <tag>older</tag>
      <tag>Excel</tag>
      <tag>format</tag>
      <tag>(.xls</tag>
      <tag>files),</tag>
      <tag>but</tag>
      <tag>may</tag>
      <tag>be</tag>
      <tag>adding</tag>
      <tag>support</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>future</tag>
      <tag>for</tag>
      <tag>newer</tag>
      <tag>2007/2010</tag>
      <tag>formats.</tag>
      <tag>You</tag>
      <tag>can</tag>
      <tag>also</tag>
      <tag>use</tag>
      <tag>EPPlus,</tag>
      <tag>which</tag>
      <tag>works</tag>
      <tag>only</tag>
      <tag>for</tag>
      <tag>Excel</tag>
      <tag>2007/2010</tag>
      <tag>format</tag>
      <tag>files</tag>
      <tag>(.xlsx</tag>
      <tag>files).</tag>
      <tag>There</tag>
      <tag>are</tag>
      <tag>a</tag>
      <tag>few</tag>
      <tag>known</tag>
      <tag>bugs</tag>
      <tag>with</tag>
      <tag>each</tag>
      <tag>library</tag>
      <tag>as</tag>
      <tag>noted</tag>
      <tag>in</tag>
      <tag>the</tag>
      <tag>comments.</tag>
      <tag>In</tag>
      <tag>all,</tag>
      <tag>EPPlus</tag>
      <tag>seems</tag>
      <tag>to</tag>
      <tag>be</tag>
      <tag>the</tag>
      <tag>best</tag>
      <tag>choice</tag>
      <tag>as</tag>
      <tag>time</tag>
      <tag>goes</tag>
      <tag>on.</tag>
      <tag>It</tag>
      <tag>seems</tag>
      <tag>to</tag>
      <tag>be</tag>
      <tag>more</tag>
      <tag>actively</tag>
      <tag>updated</tag>
      <tag>and</tag>
      <tag>documented</tag>
      <tag>as</tag>
      <tag>well.</tag>
      <tag>Also,</tag>
      <tag>as</tag>
      <tag>noted</tag>
      <tag>by</tag>
      <tag>@АртёмЦарионов</tag>
      <tag>below,</tag>
      <tag>EPPlus</tag>
      <tag>has</tag>
      <tag>support</tag>
      <tag>for</tag>
      <tag>Pivot</tag>
      <tag>Tables</tag>
      <tag>and</tag>
      <tag>ExcelLibrary</tag>
      <tag>may</tag>
      <tag>have</tag>
      <tag>some</tag>
      <tag>support</tag>
      <tag>(Pivot</tag>
      <tag>table</tag>
      <tag>issue</tag>
      <tag>in</tag>
      <tag>ExcelLibrary)</tag>
      <tag>Here</tag>
      <tag>are</tag>
      <tag>a</tag>
      <tag>couple</tag>
      <tag>links</tag>
      <tag>for</tag>
      <tag>quick</tag>
      <tag>reference:</tag>
      <tag>ExcelLibrary</tag>
      <tag>-</tag>
      <tag>GNU</tag>
      <tag>Lesser</tag>
      <tag>GPL</tag>
      <tag>EPPlus</tag>
      <tag>-</tag>
      <tag>GNU</tag>
      <tag>Lesser</tag>
      <tag>General</tag>
      <tag>Public</tag>
      <tag>License</tag>
      <tag>(LGPL)</tag>
      <tag>Creat</tag>
      <tag>Crea</tag>
      <tag>Cre</tag>
      <tag>Cr</tag>
      <tag>Exce</tag>
      <tag>Exc</tag>
      <tag>Ex</tag>
      <tag>(.XL</tag>
      <tag>(.X</tag>
      <tag>(.</tag>
      <tag>an</tag>
      <tag>.XLSX</tag>
      <tag>.XLS</tag>
      <tag>.XL</tag>
      <tag>.X</tag>
      <tag>fil</tag>
      <tag>fi</tag>
      <tag>fro</tag>
      <tag>fr</tag>
      <tag>Yo</tag>
      <tag>ca</tag>
      <tag>us</tag>
      <tag>librar</tag>
      <tag>libra</tag>
      <tag>libr</tag>
      <tag>lib</tag>
      <tag>li</tag>
      <tag>calle</tag>
      <tag>call</tag>
      <tag>cal</tag>
      <tag>ExcelLibrary</tag>
      <tag>ExcelLibrar</tag>
      <tag>ExcelLibra</tag>
      <tag>ExcelLibr</tag>
      <tag>ExcelLib</tag>
      <tag>ExcelLi</tag>
      <tag>ExcelL</tag>
      <tag>Excel</tag>
      <tag>It'</tag>
      <tag>It</tag>
      <tag>free</tag>
      <tag>fre</tag>
      <tag>ope</tag>
      <tag>op</tag>
      <tag>sourc</tag>
      <tag>sour</tag>
      <tag>sou</tag>
      <tag>so</tag>
      <tag>poste</tag>
      <tag>post</tag>
      <tag>pos</tag>
      <tag>po</tag>
      <tag>Googl</tag>
      <tag>Goog</tag>
      <tag>Goo</tag>
      <tag>Go</tag>
      <tag>Code</tag>
      <tag>Cod</tag>
      <tag>Co</tag>
      <tag>Thi</tag>
      <tag>Th</tag>
      <tag>look</tag>
      <tag>loo</tag>
      <tag>lo</tag>
      <tag>por</tag>
      <tag>th</tag>
      <tag>PH</tag>
      <tag>ExcelWrite</tag>
      <tag>ExcelWrit</tag>
      <tag>ExcelWri</tag>
      <tag>ExcelWr</tag>
      <tag>ExcelW</tag>
      <tag>tha</tag>
      <tag>yo</tag>
      <tag>mentione</tag>
      <tag>mention</tag>
      <tag>mentio</tag>
      <tag>menti</tag>
      <tag>ment</tag>
      <tag>men</tag>
      <tag>me</tag>
      <tag>above</tag>
      <tag>abov</tag>
      <tag>abo</tag>
      <tag>ab</tag>
      <tag>wil</tag>
      <tag>wi</tag>
      <tag>no</tag>
      <tag>writ</tag>
      <tag>wri</tag>
      <tag>wr</tag>
      <tag>ne</tag>
      <tag>.xls</tag>
      <tag>.xl</tag>
      <tag>.x</tag>
      <tag>forma</tag>
      <tag>form</tag>
      <tag>for</tag>
      <tag>fo</tag>
      <tag>yet</tag>
      <tag>ye</tag>
      <tag>bu</tag>
      <tag>the</tag>
      <tag>ar</tag>
      <tag>workin</tag>
      <tag>worki</tag>
      <tag>work</tag>
      <tag>wor</tag>
      <tag>wo</tag>
      <tag>addin</tag>
      <tag>addi</tag>
      <tag>add</tag>
      <tag>ad</tag>
      <tag>functionalit</tag>
      <tag>functionali</tag>
      <tag>functional</tag>
      <tag>functiona</tag>
      <tag>function</tag>
      <tag>functio</tag>
      <tag>functi</tag>
      <tag>funct</tag>
      <tag>func</tag>
      <tag>fun</tag>
      <tag>fu</tag>
      <tag>in</tag>
      <tag>ver</tag>
      <tag>ve</tag>
      <tag>simple</tag>
      <tag>simpl</tag>
      <tag>simp</tag>
      <tag>sim</tag>
      <tag>si</tag>
      <tag>smal</tag>
      <tag>sma</tag>
      <tag>sm</tag>
      <tag>eas</tag>
      <tag>ea</tag>
      <tag>use</tag>
      <tag>Plu</tag>
      <tag>Pl</tag>
      <tag>ha</tag>
      <tag>DataSetHelpe</tag>
      <tag>DataSetHelp</tag>
      <tag>DataSetHel</tag>
      <tag>DataSetHe</tag>
      <tag>DataSetH</tag>
      <tag>DataSet</tag>
      <tag>DataSe</tag>
      <tag>DataS</tag>
      <tag>Data</tag>
      <tag>Dat</tag>
      <tag>Da</tag>
      <tag>let</tag>
      <tag>le</tag>
      <tag>DataTable</tag>
      <tag>DataTabl</tag>
      <tag>DataTab</tag>
      <tag>DataTa</tag>
      <tag>DataT</tag>
      <tag>easil</tag>
      <tag>easi</tag>
      <tag>wit</tag>
      <tag>data</tag>
      <tag>dat</tag>
      <tag>da</tag>
      <tag>seem</tag>
      <tag>see</tag>
      <tag>se</tag>
      <tag>stil</tag>
      <tag>sti</tag>
      <tag>st</tag>
      <tag>onl</tag>
      <tag>on</tag>
      <tag>olde</tag>
      <tag>old</tag>
      <tag>ol</tag>
      <tag>(.xl</tag>
      <tag>(.x</tag>
      <tag>files)</tag>
      <tag>files</tag>
      <tag>file</tag>
      <tag>ma</tag>
      <tag>suppor</tag>
      <tag>suppo</tag>
      <tag>supp</tag>
      <tag>sup</tag>
      <tag>su</tag>
      <tag>futur</tag>
      <tag>futu</tag>
      <tag>fut</tag>
      <tag>newe</tag>
      <tag>new</tag>
      <tag>2007/201</tag>
      <tag>2007/20</tag>
      <tag>2007/2</tag>
      <tag>2007/</tag>
      <tag>2007</tag>
      <tag>200</tag>
      <tag>20</tag>
      <tag>formats</tag>
      <tag>format</tag>
      <tag>als</tag>
      <tag>al</tag>
      <tag>EPPlus</tag>
      <tag>EPPlu</tag>
      <tag>EPPl</tag>
      <tag>EPP</tag>
      <tag>EP</tag>
      <tag>whic</tag>
      <tag>whi</tag>
      <tag>wh</tag>
      <tag>(.xls</tag>
      <tag>Ther</tag>
      <tag>The</tag>
      <tag>fe</tag>
      <tag>know</tag>
      <tag>kno</tag>
      <tag>kn</tag>
      <tag>bug</tag>
      <tag>eac</tag>
      <tag>note</tag>
      <tag>not</tag>
      <tag>comments</tag>
      <tag>comment</tag>
      <tag>commen</tag>
      <tag>comme</tag>
      <tag>comm</tag>
      <tag>com</tag>
      <tag>co</tag>
      <tag>all</tag>
      <tag>bes</tag>
      <tag>be</tag>
      <tag>choic</tag>
      <tag>choi</tag>
      <tag>cho</tag>
      <tag>ch</tag>
      <tag>tim</tag>
      <tag>ti</tag>
      <tag>goe</tag>
      <tag>go</tag>
      <tag>mor</tag>
      <tag>mo</tag>
      <tag>activel</tag>
      <tag>active</tag>
      <tag>activ</tag>
      <tag>acti</tag>
      <tag>act</tag>
      <tag>ac</tag>
      <tag>update</tag>
      <tag>updat</tag>
      <tag>upda</tag>
      <tag>upd</tag>
      <tag>up</tag>
      <tag>documente</tag>
      <tag>document</tag>
      <tag>documen</tag>
      <tag>docume</tag>
      <tag>docum</tag>
      <tag>docu</tag>
      <tag>doc</tag>
      <tag>do</tag>
      <tag>well</tag>
      <tag>wel</tag>
      <tag>we</tag>
      <tag>Also</tag>
      <tag>Als</tag>
      <tag>Al</tag>
      <tag>@АртёмЦарионо</tag>
      <tag>@АртёмЦарион</tag>
      <tag>@АртёмЦарио</tag>
      <tag>@АртёмЦари</tag>
      <tag>@АртёмЦар</tag>
      <tag>@АртёмЦа</tag>
      <tag>@АртёмЦ</tag>
      <tag>@Артём</tag>
      <tag>@Артё</tag>
      <tag>@Арт</tag>
      <tag>@Ар</tag>
      <tag>@А</tag>
      <tag>below</tag>
      <tag>belo</tag>
      <tag>bel</tag>
      <tag>Pivo</tag>
      <tag>Piv</tag>
      <tag>Pi</tag>
      <tag>Table</tag>
      <tag>Tabl</tag>
      <tag>Tab</tag>
      <tag>Ta</tag>
      <tag>hav</tag>
      <tag>som</tag>
      <tag>(Pivo</tag>
      <tag>(Piv</tag>
      <tag>(Pi</tag>
      <tag>(P</tag>
      <tag>tabl</tag>
      <tag>tab</tag>
      <tag>ta</tag>
      <tag>issu</tag>
      <tag>iss</tag>
      <tag>is</tag>
      <tag>Her</tag>
      <tag>He</tag>
      <tag>coupl</tag>
      <tag>coup</tag>
      <tag>cou</tag>
      <tag>link</tag>
      <tag>lin</tag>
      <tag>quic</tag>
      <tag>qui</tag>
      <tag>qu</tag>
      <tag>reference</tag>
      <tag>referenc</tag>
      <tag>referen</tag>
      <tag>refere</tag>
      <tag>refer</tag>
      <tag>refe</tag>
      <tag>ref</tag>
      <tag>re</tag>
      <tag>GN</tag>
      <tag>Lesse</tag>
      <tag>Less</tag>
      <tag>Les</tag>
      <tag>Le</tag>
      <tag>GP</tag>
      <tag>Genera</tag>
      <tag>Gener</tag>
      <tag>Gene</tag>
      <tag>Gen</tag>
      <tag>Ge</tag>
      <tag>Publi</tag>
      <tag>Publ</tag>
      <tag>Pub</tag>
      <tag>Pu</tag>
      <tag>Licens</tag>
      <tag>Licen</tag>
      <tag>Lice</tag>
      <tag>Lic</tag>
      <tag>Li</tag>
      <tag>(LGPL</tag>
      <tag>(LGP</tag>
      <tag>(LG</tag>
      <tag>(L</tag>
    </tags>
  </post>
  <post id="7bf4c158-d4be-4c7c-a9c2-44acdd0bfdb8" author="rivaa" lastModificationTime="2018-11-14T12:50:39.8195454Z">
    <title><![CDATA[Test RichTextControl]]></title>
    <description><![CDATA[<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>
		</title>
		<style type="text/css">
			.cs95E872D0{text-align:left;text-indent:0pt;margin:0pt 0pt 0pt 0pt}
			.csCD771D48{color:#000000;background-color:#FF0000;font-family:'Times New Roman';font-size:12pt;font-weight:normal;font-style:normal;}
		</style>
	</head>
	<body>
		<p class="cs95E872D0"><span class="csCD771D48">&middot;Rich text control rick</span></p></body>
</html>
]]></description>
    <tags>
      <tag>Test</tag>
      <tag>RichTextControl</tag>
      <tag>Tes</tag>
      <tag>Te</tag>
      <tag>RichTextContro</tag>
      <tag>RichTextContr</tag>
      <tag>RichTextCont</tag>
      <tag>RichTextCon</tag>
      <tag>RichTextCo</tag>
      <tag>RichTextC</tag>
      <tag>RichText</tag>
      <tag>RichTex</tag>
      <tag>RichTe</tag>
      <tag>RichT</tag>
      <tag>Rich</tag>
      <tag>Ric</tag>
      <tag>Ri</tag>
    </tags>
  </post>
  <post id="4955ef21-db46-49db-9828-4e759ea5fefc" author="rivaa" lastModificationTime="2018-11-14T12:47:25.3731579Z">
    <title><![CDATA[new]]></title>
    <description><![CDATA[xml test]]></description>
    <tags>
      <tag>new</tag>
      <tag>xml</tag>
      <tag>test</tag>
      <tag>ne</tag>
      <tag>xm</tag>
      <tag>tes</tag>
      <tag>te</tag>
    </tags>
  </post>
</posts>